#region license
// Copyright (c) 2009 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by Boo astgen.boo.
//

namespace Boo.Lang.Compiler.Ast

import System

public interface IAstVisitor:	
	def OnCompileUnit(node as CompileUnit) as void:
		pass
	def OnTypeMemberStatement(node as TypeMemberStatement) as void:
		pass
	def OnExplicitMemberInfo(node as ExplicitMemberInfo) as void:
		pass
	def OnSimpleTypeReference(node as SimpleTypeReference) as void:
		pass
	def OnArrayTypeReference(node as ArrayTypeReference) as void:
		pass
	def OnCallableTypeReference(node as CallableTypeReference) as void:
		pass
	def OnGenericTypeReference(node as GenericTypeReference) as void:
		pass
	def OnGenericTypeDefinitionReference(node as GenericTypeDefinitionReference) as void:
		pass
	def OnCallableDefinition(node as CallableDefinition) as void:
		pass
	def OnNamespaceDeclaration(node as NamespaceDeclaration) as void:
		pass
	def OnImport(node as Import) as void:
		pass
	def OnModule(node as Module) as void:
		pass
	def OnClassDefinition(node as ClassDefinition) as void:
		pass
	def OnStructDefinition(node as StructDefinition) as void:
		pass
	def OnInterfaceDefinition(node as InterfaceDefinition) as void:
		pass
	def OnEnumDefinition(node as EnumDefinition) as void:
		pass
	def OnEnumMember(node as EnumMember) as void:
		pass
	def OnField(node as Field) as void:
		pass
	def OnProperty(node as Property) as void:
		pass
	def OnEvent(node as Event) as void:
		pass
	def OnLocal(node as Local) as void:
		pass
	def OnBlockExpression(node as BlockExpression) as void:
		pass
	def OnMethod(node as Method) as void:
		pass
	def OnConstructor(node as Constructor) as void:
		pass
	def OnDestructor(node as Destructor) as void:
		pass
	def OnParameterDeclaration(node as ParameterDeclaration) as void:
		pass
	def OnGenericParameterDeclaration(node as GenericParameterDeclaration) as void:
		pass
	def OnDeclaration(node as Declaration) as void:
		pass
	def OnAttribute(node as Attribute) as void:
		pass
	def OnStatementModifier(node as StatementModifier) as void:
		pass
	def OnGotoStatement(node as GotoStatement) as void:
		pass
	def OnLabelStatement(node as LabelStatement) as void:
		pass
	def OnBlock(node as Block) as void:
		pass
	def OnDeclarationStatement(node as DeclarationStatement) as void:
		pass
	def OnMacroStatement(node as MacroStatement) as void:
		pass
	def OnTryStatement(node as TryStatement) as void:
		pass
	def OnExceptionHandler(node as ExceptionHandler) as void:
		pass
	def OnIfStatement(node as IfStatement) as void:
		pass
	def OnUnlessStatement(node as UnlessStatement) as void:
		pass
	def OnForStatement(node as ForStatement) as void:
		pass
	def OnWhileStatement(node as WhileStatement) as void:
		pass
	def OnBreakStatement(node as BreakStatement) as void:
		pass
	def OnContinueStatement(node as ContinueStatement) as void:
		pass
	def OnReturnStatement(node as ReturnStatement) as void:
		pass
	def OnYieldStatement(node as YieldStatement) as void:
		pass
	def OnRaiseStatement(node as RaiseStatement) as void:
		pass
	def OnUnpackStatement(node as UnpackStatement) as void:
		pass
	def OnExpressionStatement(node as ExpressionStatement) as void:
		pass
	def OnOmittedExpression(node as OmittedExpression) as void:
		pass
	def OnExpressionPair(node as ExpressionPair) as void:
		pass
	def OnMethodInvocationExpression(node as MethodInvocationExpression) as void:
		pass
	def OnUnaryExpression(node as UnaryExpression) as void:
		pass
	def OnBinaryExpression(node as BinaryExpression) as void:
		pass
	def OnConditionalExpression(node as ConditionalExpression) as void:
		pass
	def OnReferenceExpression(node as ReferenceExpression) as void:
		pass
	def OnMemberReferenceExpression(node as MemberReferenceExpression) as void:
		pass
	def OnGenericReferenceExpression(node as GenericReferenceExpression) as void:
		pass
	def OnQuasiquoteExpression(node as QuasiquoteExpression) as void:
		pass
	def OnStringLiteralExpression(node as StringLiteralExpression) as void:
		pass
	def OnCharLiteralExpression(node as CharLiteralExpression) as void:
		pass
	def OnTimeSpanLiteralExpression(node as TimeSpanLiteralExpression) as void:
		pass
	def OnIntegerLiteralExpression(node as IntegerLiteralExpression) as void:
		pass
	def OnDoubleLiteralExpression(node as DoubleLiteralExpression) as void:
		pass
	def OnNullLiteralExpression(node as NullLiteralExpression) as void:
		pass
	def OnSelfLiteralExpression(node as SelfLiteralExpression) as void:
		pass
	def OnSuperLiteralExpression(node as SuperLiteralExpression) as void:
		pass
	def OnBoolLiteralExpression(node as BoolLiteralExpression) as void:
		pass
	def OnRELiteralExpression(node as RELiteralExpression) as void:
		pass
	def OnSpliceExpression(node as SpliceExpression) as void:
		pass
	def OnSpliceTypeReference(node as SpliceTypeReference) as void:
		pass
	def OnSpliceMemberReferenceExpression(node as SpliceMemberReferenceExpression) as void:
		pass
	def OnSpliceTypeMember(node as SpliceTypeMember) as void:
		pass
	def OnSpliceTypeDefinitionBody(node as SpliceTypeDefinitionBody) as void:
		pass
	def OnSpliceParameterDeclaration(node as SpliceParameterDeclaration) as void:
		pass
	def OnExpressionInterpolationExpression(node as ExpressionInterpolationExpression) as void:
		pass
	def OnHashLiteralExpression(node as HashLiteralExpression) as void:
		pass
	def OnListLiteralExpression(node as ListLiteralExpression) as void:
		pass
	def OnCollectionInitializationExpression(node as CollectionInitializationExpression) as void:
		pass
	def OnArrayLiteralExpression(node as ArrayLiteralExpression) as void:
		pass
	def OnGeneratorExpression(node as GeneratorExpression) as void:
		pass
	def OnExtendedGeneratorExpression(node as ExtendedGeneratorExpression) as void:
		pass
	def OnSlice(node as Slice) as void:
		pass
	def OnSlicingExpression(node as SlicingExpression) as void:
		pass
	def OnTryCastExpression(node as TryCastExpression) as void:
		pass
	def OnCastExpression(node as CastExpression) as void:
		pass
	def OnTypeofExpression(node as TypeofExpression) as void:
		pass
	def OnCustomStatement(node as CustomStatement) as void:
		pass
	def OnCustomExpression(node as CustomExpression) as void:
		pass
	def OnStatementTypeMember(node as StatementTypeMember) as void:
		pass
