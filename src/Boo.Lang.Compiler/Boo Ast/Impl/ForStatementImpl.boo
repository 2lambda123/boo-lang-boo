#region license
// Copyright (c) 2009 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by Boo astgen.boo.
//
namespace Boo.Lang.Compiler.Ast

import System.Collections
import System.Runtime.Serialization

[System.Serializable]
public partial class ForStatement (Statement):
	protected _declarations as DeclarationCollection

	protected _iterator as Expression

	protected _block as Block

	protected _orBlock as Block

	protected _thenBlock as Block


	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public def CloneNode() as ForStatement:
		return Clone() cast ForStatement
	
	/// <summary>
	/// <see cref="Node.CleanClone"/>
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public def CleanClone() as ForStatement:
		return super.CleanClone() as ForStatement

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public NodeType as NodeType:
		get: return NodeType.ForStatement

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Accept(visitor as IAstVisitor) as void:
		visitor.OnForStatement(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Matches(node as Node) as bool:
		return false if (node is null) or (NodeType != node.NodeType)
		other = node as ForStatement
		return NoMatch("ForStatement._modifier") unless Node.Matches(_modifier, other._modifier)
		return NoMatch("ForStatement._declarations") unless Node.AllMatch(_declarations, other._declarations)
		return NoMatch("ForStatement._iterator") unless Node.Matches(_iterator, other._iterator)
		return NoMatch("ForStatement._block") unless Node.Matches(_block, other._block)
		return NoMatch("ForStatement._orBlock") unless Node.Matches(_orBlock, other._orBlock)
		return NoMatch("ForStatement._thenBlock") unless Node.Matches(_thenBlock, other._thenBlock)
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Replace(existing as Node, newNode as Node) as bool:
		return true if super.Replace(existing, newNode)
		if _modifier == existing:
			self.Modifier = newNode as StatementModifier
			return true;
		if _declarations is not null:
			item2 = existing as Declaration
			if item2 is not null:
				newItem2 = newNode as Declaration
				return true if _declarations.Replace(item2, newItem2)
		if _iterator == existing:
			self.Iterator = newNode as Expression
			return true;
		if _block == existing:
			self.Block = newNode as Block
			return true;
		if _orBlock == existing:
			self.OrBlock = newNode as Block
			return true;
		if _thenBlock == existing:
			self.ThenBlock = newNode as Block
			return true;
		return false;

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Clone() as object:
		
		clone = ForStatement()
		clone._lexicalInfo = _lexicalInfo
		clone._endSourceLocation = _endSourceLocation
		clone._documentation = _documentation
		clone._isSynthetic = _isSynthetic
		clone._entity = _entity
		if _annotations is not null: clone._annotations = _annotations.Clone() as Hashtable
		if _modifier is not null:
			clone._modifier = _modifier.Clone() as StatementModifier
			clone._modifier.InitializeParent(clone)
		if _declarations is not null:
			clone._declarations = _declarations.Clone() as DeclarationCollection
			clone._declarations.InitializeParent(clone)
		if _iterator is not null:
			clone._iterator = _iterator.Clone() as Expression
			clone._iterator.InitializeParent(clone)
		if _block is not null:
			clone._block = _block.Clone() as Block
			clone._block.InitializeParent(clone)
		if _orBlock is not null:
			clone._orBlock = _orBlock.Clone() as Block
			clone._orBlock.InitializeParent(clone)
		if _thenBlock is not null:
			clone._thenBlock = _thenBlock.Clone() as Block
			clone._thenBlock.InitializeParent(clone)
		return clone;


	

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override internal def ClearTypeSystemBindings() as void:
		_annotations = null;
		_entity = null;
		if _modifier is not null:
			_modifier.ClearTypeSystemBindings()
		if _declarations is not null:
			_declarations.ClearTypeSystemBindings()
		if _iterator is not null:
			_iterator.ClearTypeSystemBindings()
		if _block is not null:
			_block.ClearTypeSystemBindings()
		if _orBlock is not null:
			_orBlock.ClearTypeSystemBindings()
		if _thenBlock is not null:
			_thenBlock.ClearTypeSystemBindings()



	[System.Xml.Serialization.XmlArray]
	[System.Xml.Serialization.XmlArrayItem(typeof(Declaration))]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public Declarations as DeclarationCollection:
		

		get:
			_declarations = DeclarationCollection(self) if _declarations is null
			return _declarations 
		set:
			if _declarations != value:
				_declarations = value;
				if _declarations is not null:
					_declarations.InitializeParent(self);



	[System.Xml.Serialization.XmlElement]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public Iterator as Expression:
		
		get: return _iterator
		set:
			if _iterator != value:
				_iterator = value;
				if _iterator is not null:
					_iterator.InitializeParent(self);



	[System.Xml.Serialization.XmlElement]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public Block as Block:
		
		get:
			if _block is null:
				_block = Block()
				_block.InitializeParent(self)
			return _block
		set:
			if _block != value:
				_block = value;
				if _block is not null:
					_block.InitializeParent(self);



	[System.Xml.Serialization.XmlElement]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public OrBlock as Block:
		
		get: return _orBlock
		set:
			if _orBlock != value:
				_orBlock = value;
				if _orBlock is not null:
					_orBlock.InitializeParent(self);



	[System.Xml.Serialization.XmlElement]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public ThenBlock as Block:
		
		get: return _thenBlock
		set:
			if _thenBlock != value:
				_thenBlock = value;
				if _thenBlock is not null:
					_thenBlock.InitializeParent(self);


