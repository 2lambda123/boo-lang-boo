#region license
// Copyright (c) 2009 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by Boo astgen.boo.
//
namespace Boo.Lang.Compiler.Ast

import System.Collections
import System.Runtime.Serialization

[System.Serializable]
public partial class TryStatement (Statement):
	protected _protectedBlock as Block

	protected _exceptionHandlers as ExceptionHandlerCollection

	protected _failureBlock as Block

	protected _ensureBlock as Block


	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public def CloneNode() as TryStatement:
		return Clone() cast TryStatement
	
	/// <summary>
	/// <see cref="Node.CleanClone"/>
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public def CleanClone() as TryStatement:
		return super.CleanClone() as TryStatement

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public NodeType as NodeType:
		get: return NodeType.TryStatement

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Accept(visitor as IAstVisitor) as void:
		visitor.OnTryStatement(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Matches(node as Node) as bool:
		return false if (node is null) or (NodeType != node.NodeType)
		other = node as TryStatement
		return NoMatch("TryStatement._modifier") unless Node.Matches(_modifier, other._modifier)
		return NoMatch("TryStatement._protectedBlock") unless Node.Matches(_protectedBlock, other._protectedBlock)
		return NoMatch("TryStatement._exceptionHandlers") unless Node.AllMatch(_exceptionHandlers, other._exceptionHandlers)
		return NoMatch("TryStatement._failureBlock") unless Node.Matches(_failureBlock, other._failureBlock)
		return NoMatch("TryStatement._ensureBlock") unless Node.Matches(_ensureBlock, other._ensureBlock)
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Replace(existing as Node, newNode as Node) as bool:
		return true if super.Replace(existing, newNode)
		if _modifier == existing:
			self.Modifier = newNode as StatementModifier
			return true;
		if _protectedBlock == existing:
			self.ProtectedBlock = newNode as Block
			return true;
		if _exceptionHandlers is not null:
			item = existing as ExceptionHandler
			if item is not null:
				newItem = newNode as ExceptionHandler
				return true if _exceptionHandlers.Replace(item, newItem)
		if _failureBlock == existing:
			self.FailureBlock = newNode as Block
			return true;
		if _ensureBlock == existing:
			self.EnsureBlock = newNode as Block
			return true;
		return false;

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Clone() as object:
		
		clone = TryStatement()
		clone._lexicalInfo = _lexicalInfo
		clone._endSourceLocation = _endSourceLocation
		clone._documentation = _documentation
		clone._isSynthetic = _isSynthetic
		clone._entity = _entity
		if _annotations is not null: clone._annotations = _annotations.Clone() as Hashtable
		if _modifier is not null:
			clone._modifier = _modifier.Clone() as StatementModifier
			clone._modifier.InitializeParent(clone)
		if _protectedBlock is not null:
			clone._protectedBlock = _protectedBlock.Clone() as Block
			clone._protectedBlock.InitializeParent(clone)
		if _exceptionHandlers is not null:
			clone._exceptionHandlers = _exceptionHandlers.Clone() as ExceptionHandlerCollection
			clone._exceptionHandlers.InitializeParent(clone)
		if _failureBlock is not null:
			clone._failureBlock = _failureBlock.Clone() as Block
			clone._failureBlock.InitializeParent(clone)
		if _ensureBlock is not null:
			clone._ensureBlock = _ensureBlock.Clone() as Block
			clone._ensureBlock.InitializeParent(clone)
		return clone;


	

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override internal def ClearTypeSystemBindings() as void:
		_annotations = null;
		_entity = null;
		if _modifier is not null:
			_modifier.ClearTypeSystemBindings()
		if _protectedBlock is not null:
			_protectedBlock.ClearTypeSystemBindings()
		if _exceptionHandlers is not null:
			_exceptionHandlers.ClearTypeSystemBindings()
		if _failureBlock is not null:
			_failureBlock.ClearTypeSystemBindings()
		if _ensureBlock is not null:
			_ensureBlock.ClearTypeSystemBindings()



	[System.Xml.Serialization.XmlElement]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public ProtectedBlock as Block:
		
		get:
			if _protectedBlock is null:
				_protectedBlock = Block()
				_protectedBlock.InitializeParent(this)
			return _protectedBlock
		set:
			if _protectedBlock != value:
				_protectedBlock = value;
				if _protectedBlock is not null:
					_protectedBlock.InitializeParent(this);



	[System.Xml.Serialization.XmlArray]
	[System.Xml.Serialization.XmlArrayItem(typeof(ExceptionHandler))]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public ExceptionHandlers as ExceptionHandlerCollection:
		

		get:
			_exceptionHandlers = ExceptionHandlerCollection(self)() if _exceptionHandlers is null
			return _exceptionHandlers 
		set:
			if _exceptionHandlers != value:
				_exceptionHandlers = value;
				if _exceptionHandlers is not null:
					_exceptionHandlers.InitializeParent(this);



	[System.Xml.Serialization.XmlElement]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public FailureBlock as Block:
		
		get: return _failureBlock
		set:
			if _failureBlock != value:
				_failureBlock = value;
				if _failureBlock is not null:
					_failureBlock.InitializeParent(this);



	[System.Xml.Serialization.XmlElement]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public EnsureBlock as Block:
		
		get: return _ensureBlock
		set:
			if _ensureBlock != value:
				_ensureBlock = value;
				if _ensureBlock is not null:
					_ensureBlock.InitializeParent(this);


