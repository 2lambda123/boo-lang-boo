#region license
// Copyright (c) 2009 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by Boo astgen.boo.
//

namespace Boo.Lang.Compiler.Ast

import System

public partial class DepthFirstTransformer(IAstVisitor):

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCompileUnit(node as Boo.Lang.Compiler.Ast.CompileUnit) as void:
		if EnterCompileUnit(node):
			Visit(node.Modules)

			LeaveCompileUnit(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCompileUnit(node as Boo.Lang.Compiler.Ast.CompileUnit) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveCompileUnit(node as Boo.Lang.Compiler.Ast.CompileUnit) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTypeMemberStatement(node as Boo.Lang.Compiler.Ast.TypeMemberStatement) as void:
		if EnterTypeMemberStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			TypeMember currentTypeMemberValue = node.TypeMember;
			if currentTypeMemberValue is not null:
				newValue = VisitNode(currentTypeMemberValue) cast TypeMember
				unless object.ReferenceEquals(newValue, currentTypeMemberValue):
					node.TypeMember = newValue

			LeaveTypeMemberStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterTypeMemberStatement(node as Boo.Lang.Compiler.Ast.TypeMemberStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveTypeMemberStatement(node as Boo.Lang.Compiler.Ast.TypeMemberStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExplicitMemberInfo(node as Boo.Lang.Compiler.Ast.ExplicitMemberInfo) as void:
		if EnterExplicitMemberInfo(node):
			SimpleTypeReference currentInterfaceTypeValue = node.InterfaceType;
			if currentInterfaceTypeValue is not null:
				newValue = VisitNode(currentInterfaceTypeValue) cast SimpleTypeReference
				unless object.ReferenceEquals(newValue, currentInterfaceTypeValue):
					node.InterfaceType = newValue

			LeaveExplicitMemberInfo(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExplicitMemberInfo(node as Boo.Lang.Compiler.Ast.ExplicitMemberInfo) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveExplicitMemberInfo(node as Boo.Lang.Compiler.Ast.ExplicitMemberInfo) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSimpleTypeReference(node as Boo.Lang.Compiler.Ast.SimpleTypeReference) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnArrayTypeReference(node as Boo.Lang.Compiler.Ast.ArrayTypeReference) as void:
		if EnterArrayTypeReference(node):
			TypeReference currentElementTypeValue = node.ElementType;
			if currentElementTypeValue is not null:
				newValue = VisitNode(currentElementTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentElementTypeValue):
					node.ElementType = newValue
			IntegerLiteralExpression currentRankValue = node.Rank;
			if currentRankValue is not null:
				newValue = VisitNode(currentRankValue) cast IntegerLiteralExpression
				unless object.ReferenceEquals(newValue, currentRankValue):
					node.Rank = newValue

			LeaveArrayTypeReference(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterArrayTypeReference(node as Boo.Lang.Compiler.Ast.ArrayTypeReference) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveArrayTypeReference(node as Boo.Lang.Compiler.Ast.ArrayTypeReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCallableTypeReference(node as Boo.Lang.Compiler.Ast.CallableTypeReference) as void:
		if EnterCallableTypeReference(node):
			Visit(node.Parameters)
			TypeReference currentReturnTypeValue = node.ReturnType;
			if currentReturnTypeValue is not null:
				newValue = VisitNode(currentReturnTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentReturnTypeValue):
					node.ReturnType = newValue

			LeaveCallableTypeReference(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCallableTypeReference(node as Boo.Lang.Compiler.Ast.CallableTypeReference) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveCallableTypeReference(node as Boo.Lang.Compiler.Ast.CallableTypeReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericTypeReference(node as Boo.Lang.Compiler.Ast.GenericTypeReference) as void:
		if EnterGenericTypeReference(node):
			Visit(node.GenericArguments)

			LeaveGenericTypeReference(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGenericTypeReference(node as Boo.Lang.Compiler.Ast.GenericTypeReference) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveGenericTypeReference(node as Boo.Lang.Compiler.Ast.GenericTypeReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericTypeDefinitionReference(node as Boo.Lang.Compiler.Ast.GenericTypeDefinitionReference) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCallableDefinition(node as Boo.Lang.Compiler.Ast.CallableDefinition) as void:
		if EnterCallableDefinition(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Visit(node.GenericParameters)
			TypeReference currentReturnTypeValue = node.ReturnType;
			if currentReturnTypeValue is not null:
				newValue = VisitNode(currentReturnTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentReturnTypeValue):
					node.ReturnType = newValue
			Visit(node.ReturnTypeAttributes)

			LeaveCallableDefinition(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCallableDefinition(node as Boo.Lang.Compiler.Ast.CallableDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveCallableDefinition(node as Boo.Lang.Compiler.Ast.CallableDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnNamespaceDeclaration(node as Boo.Lang.Compiler.Ast.NamespaceDeclaration) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnImport(node as Boo.Lang.Compiler.Ast.Import) as void:
		if EnterImport(node):
			Expression currentExpressionValue = node.Expression;
			if currentExpressionValue is not null:
				newValue = VisitNode(currentExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExpressionValue):
					node.Expression = newValue
			ReferenceExpression currentAssemblyReferenceValue = node.AssemblyReference;
			if currentAssemblyReferenceValue is not null:
				newValue = VisitNode(currentAssemblyReferenceValue) cast ReferenceExpression
				unless object.ReferenceEquals(newValue, currentAssemblyReferenceValue):
					node.AssemblyReference = newValue
			ReferenceExpression currentAliasValue = node.Alias;
			if currentAliasValue is not null:
				newValue = VisitNode(currentAliasValue) cast ReferenceExpression
				unless object.ReferenceEquals(newValue, currentAliasValue):
					node.Alias = newValue

			LeaveImport(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterImport(node as Boo.Lang.Compiler.Ast.Import) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveImport(node as Boo.Lang.Compiler.Ast.Import) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnModule(node as Boo.Lang.Compiler.Ast.Module) as void:
		if EnterModule(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)
			NamespaceDeclaration currentNamespaceValue = node.Namespace;
			if currentNamespaceValue is not null:
				newValue = VisitNode(currentNamespaceValue) cast NamespaceDeclaration
				unless object.ReferenceEquals(newValue, currentNamespaceValue):
					node.Namespace = newValue
			Visit(node.Imports)
			Block currentGlobalsValue = node.Globals;
			if currentGlobalsValue is not null:
				newValue = VisitNode(currentGlobalsValue) cast Block
				unless object.ReferenceEquals(newValue, currentGlobalsValue):
					node.Globals = newValue
			Visit(node.AssemblyAttributes)

			LeaveModule(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterModule(node as Boo.Lang.Compiler.Ast.Module) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveModule(node as Boo.Lang.Compiler.Ast.Module) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnClassDefinition(node as Boo.Lang.Compiler.Ast.ClassDefinition) as void:
		if EnterClassDefinition(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)

			LeaveClassDefinition(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterClassDefinition(node as Boo.Lang.Compiler.Ast.ClassDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveClassDefinition(node as Boo.Lang.Compiler.Ast.ClassDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStructDefinition(node as Boo.Lang.Compiler.Ast.StructDefinition) as void:
		if EnterStructDefinition(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)

			LeaveStructDefinition(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterStructDefinition(node as Boo.Lang.Compiler.Ast.StructDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveStructDefinition(node as Boo.Lang.Compiler.Ast.StructDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnInterfaceDefinition(node as Boo.Lang.Compiler.Ast.InterfaceDefinition) as void:
		if EnterInterfaceDefinition(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)

			LeaveInterfaceDefinition(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterInterfaceDefinition(node as Boo.Lang.Compiler.Ast.InterfaceDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveInterfaceDefinition(node as Boo.Lang.Compiler.Ast.InterfaceDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnEnumDefinition(node as Boo.Lang.Compiler.Ast.EnumDefinition) as void:
		if EnterEnumDefinition(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)

			LeaveEnumDefinition(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterEnumDefinition(node as Boo.Lang.Compiler.Ast.EnumDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveEnumDefinition(node as Boo.Lang.Compiler.Ast.EnumDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnEnumMember(node as Boo.Lang.Compiler.Ast.EnumMember) as void:
		if EnterEnumMember(node):
			Visit(node.Attributes)
			Expression currentInitializerValue = node.Initializer;
			if currentInitializerValue is not null:
				newValue = VisitNode(currentInitializerValue) cast Expression
				unless object.ReferenceEquals(newValue, currentInitializerValue):
					node.Initializer = newValue

			LeaveEnumMember(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterEnumMember(node as Boo.Lang.Compiler.Ast.EnumMember) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveEnumMember(node as Boo.Lang.Compiler.Ast.EnumMember) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnField(node as Boo.Lang.Compiler.Ast.Field) as void:
		if EnterField(node):
			Visit(node.Attributes)
			TypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue
			Expression currentInitializerValue = node.Initializer;
			if currentInitializerValue is not null:
				newValue = VisitNode(currentInitializerValue) cast Expression
				unless object.ReferenceEquals(newValue, currentInitializerValue):
					node.Initializer = newValue

			LeaveField(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterField(node as Boo.Lang.Compiler.Ast.Field) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveField(node as Boo.Lang.Compiler.Ast.Field) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnProperty(node as Boo.Lang.Compiler.Ast.Property) as void:
		if EnterProperty(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Method currentGetterValue = node.Getter;
			if currentGetterValue is not null:
				newValue = VisitNode(currentGetterValue) cast Method
				unless object.ReferenceEquals(newValue, currentGetterValue):
					node.Getter = newValue
			Method currentSetterValue = node.Setter;
			if currentSetterValue is not null:
				newValue = VisitNode(currentSetterValue) cast Method
				unless object.ReferenceEquals(newValue, currentSetterValue):
					node.Setter = newValue
			TypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue
			ExplicitMemberInfo currentExplicitInfoValue = node.ExplicitInfo;
			if currentExplicitInfoValue is not null:
				newValue = VisitNode(currentExplicitInfoValue) cast ExplicitMemberInfo
				unless object.ReferenceEquals(newValue, currentExplicitInfoValue):
					node.ExplicitInfo = newValue

			LeaveProperty(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterProperty(node as Boo.Lang.Compiler.Ast.Property) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveProperty(node as Boo.Lang.Compiler.Ast.Property) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnEvent(node as Boo.Lang.Compiler.Ast.Event) as void:
		if EnterEvent(node):
			Visit(node.Attributes)
			Method currentAddValue = node.Add;
			if currentAddValue is not null:
				newValue = VisitNode(currentAddValue) cast Method
				unless object.ReferenceEquals(newValue, currentAddValue):
					node.Add = newValue
			Method currentRemoveValue = node.Remove;
			if currentRemoveValue is not null:
				newValue = VisitNode(currentRemoveValue) cast Method
				unless object.ReferenceEquals(newValue, currentRemoveValue):
					node.Remove = newValue
			Method currentRaiseValue = node.Raise;
			if currentRaiseValue is not null:
				newValue = VisitNode(currentRaiseValue) cast Method
				unless object.ReferenceEquals(newValue, currentRaiseValue):
					node.Raise = newValue
			TypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue

			LeaveEvent(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterEvent(node as Boo.Lang.Compiler.Ast.Event) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveEvent(node as Boo.Lang.Compiler.Ast.Event) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnLocal(node as Boo.Lang.Compiler.Ast.Local) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBlockExpression(node as Boo.Lang.Compiler.Ast.BlockExpression) as void:
		if EnterBlockExpression(node):
			Visit(node.Parameters)
			TypeReference currentReturnTypeValue = node.ReturnType;
			if currentReturnTypeValue is not null:
				newValue = VisitNode(currentReturnTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentReturnTypeValue):
					node.ReturnType = newValue
			Block currentBodyValue = node.Body;
			if currentBodyValue is not null:
				newValue = VisitNode(currentBodyValue) cast Block
				unless object.ReferenceEquals(newValue, currentBodyValue):
					node.Body = newValue

			LeaveBlockExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterBlockExpression(node as Boo.Lang.Compiler.Ast.BlockExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveBlockExpression(node as Boo.Lang.Compiler.Ast.BlockExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMethod(node as Boo.Lang.Compiler.Ast.Method) as void:
		if EnterMethod(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Visit(node.GenericParameters)
			TypeReference currentReturnTypeValue = node.ReturnType;
			if currentReturnTypeValue is not null:
				newValue = VisitNode(currentReturnTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentReturnTypeValue):
					node.ReturnType = newValue
			Visit(node.ReturnTypeAttributes)
			Block currentBodyValue = node.Body;
			if currentBodyValue is not null:
				newValue = VisitNode(currentBodyValue) cast Block
				unless object.ReferenceEquals(newValue, currentBodyValue):
					node.Body = newValue
			Visit(node.Locals)
			ExplicitMemberInfo currentExplicitInfoValue = node.ExplicitInfo;
			if currentExplicitInfoValue is not null:
				newValue = VisitNode(currentExplicitInfoValue) cast ExplicitMemberInfo
				unless object.ReferenceEquals(newValue, currentExplicitInfoValue):
					node.ExplicitInfo = newValue

			LeaveMethod(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterMethod(node as Boo.Lang.Compiler.Ast.Method) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveMethod(node as Boo.Lang.Compiler.Ast.Method) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnConstructor(node as Boo.Lang.Compiler.Ast.Constructor) as void:
		if EnterConstructor(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Visit(node.GenericParameters)
			TypeReference currentReturnTypeValue = node.ReturnType;
			if currentReturnTypeValue is not null:
				newValue = VisitNode(currentReturnTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentReturnTypeValue):
					node.ReturnType = newValue
			Visit(node.ReturnTypeAttributes)
			Block currentBodyValue = node.Body;
			if currentBodyValue is not null:
				newValue = VisitNode(currentBodyValue) cast Block
				unless object.ReferenceEquals(newValue, currentBodyValue):
					node.Body = newValue
			Visit(node.Locals)
			ExplicitMemberInfo currentExplicitInfoValue = node.ExplicitInfo;
			if currentExplicitInfoValue is not null:
				newValue = VisitNode(currentExplicitInfoValue) cast ExplicitMemberInfo
				unless object.ReferenceEquals(newValue, currentExplicitInfoValue):
					node.ExplicitInfo = newValue

			LeaveConstructor(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterConstructor(node as Boo.Lang.Compiler.Ast.Constructor) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveConstructor(node as Boo.Lang.Compiler.Ast.Constructor) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDestructor(node as Boo.Lang.Compiler.Ast.Destructor) as void:
		if EnterDestructor(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Visit(node.GenericParameters)
			TypeReference currentReturnTypeValue = node.ReturnType;
			if currentReturnTypeValue is not null:
				newValue = VisitNode(currentReturnTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentReturnTypeValue):
					node.ReturnType = newValue
			Visit(node.ReturnTypeAttributes)
			Block currentBodyValue = node.Body;
			if currentBodyValue is not null:
				newValue = VisitNode(currentBodyValue) cast Block
				unless object.ReferenceEquals(newValue, currentBodyValue):
					node.Body = newValue
			Visit(node.Locals)
			ExplicitMemberInfo currentExplicitInfoValue = node.ExplicitInfo;
			if currentExplicitInfoValue is not null:
				newValue = VisitNode(currentExplicitInfoValue) cast ExplicitMemberInfo
				unless object.ReferenceEquals(newValue, currentExplicitInfoValue):
					node.ExplicitInfo = newValue

			LeaveDestructor(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterDestructor(node as Boo.Lang.Compiler.Ast.Destructor) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveDestructor(node as Boo.Lang.Compiler.Ast.Destructor) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnParameterDeclaration(node as Boo.Lang.Compiler.Ast.ParameterDeclaration) as void:
		if EnterParameterDeclaration(node):
			TypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue
			Visit(node.Attributes)

			LeaveParameterDeclaration(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterParameterDeclaration(node as Boo.Lang.Compiler.Ast.ParameterDeclaration) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveParameterDeclaration(node as Boo.Lang.Compiler.Ast.ParameterDeclaration) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericParameterDeclaration(node as Boo.Lang.Compiler.Ast.GenericParameterDeclaration) as void:
		if EnterGenericParameterDeclaration(node):
			Visit(node.BaseTypes)

			LeaveGenericParameterDeclaration(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGenericParameterDeclaration(node as Boo.Lang.Compiler.Ast.GenericParameterDeclaration) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveGenericParameterDeclaration(node as Boo.Lang.Compiler.Ast.GenericParameterDeclaration) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDeclaration(node as Boo.Lang.Compiler.Ast.Declaration) as void:
		if EnterDeclaration(node):
			TypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue

			LeaveDeclaration(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterDeclaration(node as Boo.Lang.Compiler.Ast.Declaration) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveDeclaration(node as Boo.Lang.Compiler.Ast.Declaration) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnAttribute(node as Boo.Lang.Compiler.Ast.Attribute) as void:
		if EnterAttribute(node):
			Visit(node.Arguments)
			Visit(node.NamedArguments)

			LeaveAttribute(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterAttribute(node as Boo.Lang.Compiler.Ast.Attribute) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveAttribute(node as Boo.Lang.Compiler.Ast.Attribute) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStatementModifier(node as Boo.Lang.Compiler.Ast.StatementModifier) as void:
		if EnterStatementModifier(node):
			Expression currentConditionValue = node.Condition;
			if currentConditionValue is not null:
				newValue = VisitNode(currentConditionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentConditionValue):
					node.Condition = newValue

			LeaveStatementModifier(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterStatementModifier(node as Boo.Lang.Compiler.Ast.StatementModifier) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveStatementModifier(node as Boo.Lang.Compiler.Ast.StatementModifier) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGotoStatement(node as Boo.Lang.Compiler.Ast.GotoStatement) as void:
		if EnterGotoStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			ReferenceExpression currentLabelValue = node.Label;
			if currentLabelValue is not null:
				newValue = VisitNode(currentLabelValue) cast ReferenceExpression
				unless object.ReferenceEquals(newValue, currentLabelValue):
					node.Label = newValue

			LeaveGotoStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGotoStatement(node as Boo.Lang.Compiler.Ast.GotoStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveGotoStatement(node as Boo.Lang.Compiler.Ast.GotoStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnLabelStatement(node as Boo.Lang.Compiler.Ast.LabelStatement) as void:
		if EnterLabelStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue

			LeaveLabelStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterLabelStatement(node as Boo.Lang.Compiler.Ast.LabelStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveLabelStatement(node as Boo.Lang.Compiler.Ast.LabelStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBlock(node as Boo.Lang.Compiler.Ast.Block) as void:
		if EnterBlock(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Visit(node.Statements)

			LeaveBlock(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterBlock(node as Boo.Lang.Compiler.Ast.Block) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveBlock(node as Boo.Lang.Compiler.Ast.Block) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDeclarationStatement(node as Boo.Lang.Compiler.Ast.DeclarationStatement) as void:
		if EnterDeclarationStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Declaration currentDeclarationValue = node.Declaration;
			if currentDeclarationValue is not null:
				newValue = VisitNode(currentDeclarationValue) cast Declaration
				unless object.ReferenceEquals(newValue, currentDeclarationValue):
					node.Declaration = newValue
			Expression currentInitializerValue = node.Initializer;
			if currentInitializerValue is not null:
				newValue = VisitNode(currentInitializerValue) cast Expression
				unless object.ReferenceEquals(newValue, currentInitializerValue):
					node.Initializer = newValue

			LeaveDeclarationStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterDeclarationStatement(node as Boo.Lang.Compiler.Ast.DeclarationStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveDeclarationStatement(node as Boo.Lang.Compiler.Ast.DeclarationStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMacroStatement(node as Boo.Lang.Compiler.Ast.MacroStatement) as void:
		if EnterMacroStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Visit(node.Arguments)
			Block currentBodyValue = node.Body;
			if currentBodyValue is not null:
				newValue = VisitNode(currentBodyValue) cast Block
				unless object.ReferenceEquals(newValue, currentBodyValue):
					node.Body = newValue

			LeaveMacroStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterMacroStatement(node as Boo.Lang.Compiler.Ast.MacroStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveMacroStatement(node as Boo.Lang.Compiler.Ast.MacroStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTryStatement(node as Boo.Lang.Compiler.Ast.TryStatement) as void:
		if EnterTryStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Block currentProtectedBlockValue = node.ProtectedBlock;
			if currentProtectedBlockValue is not null:
				newValue = VisitNode(currentProtectedBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentProtectedBlockValue):
					node.ProtectedBlock = newValue
			Visit(node.ExceptionHandlers)
			Block currentFailureBlockValue = node.FailureBlock;
			if currentFailureBlockValue is not null:
				newValue = VisitNode(currentFailureBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentFailureBlockValue):
					node.FailureBlock = newValue
			Block currentEnsureBlockValue = node.EnsureBlock;
			if currentEnsureBlockValue is not null:
				newValue = VisitNode(currentEnsureBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentEnsureBlockValue):
					node.EnsureBlock = newValue

			LeaveTryStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterTryStatement(node as Boo.Lang.Compiler.Ast.TryStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveTryStatement(node as Boo.Lang.Compiler.Ast.TryStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExceptionHandler(node as Boo.Lang.Compiler.Ast.ExceptionHandler) as void:
		if EnterExceptionHandler(node):
			Declaration currentDeclarationValue = node.Declaration;
			if currentDeclarationValue is not null:
				newValue = VisitNode(currentDeclarationValue) cast Declaration
				unless object.ReferenceEquals(newValue, currentDeclarationValue):
					node.Declaration = newValue
			Expression currentFilterConditionValue = node.FilterCondition;
			if currentFilterConditionValue is not null:
				newValue = VisitNode(currentFilterConditionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentFilterConditionValue):
					node.FilterCondition = newValue
			Block currentBlockValue = node.Block;
			if currentBlockValue is not null:
				newValue = VisitNode(currentBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentBlockValue):
					node.Block = newValue

			LeaveExceptionHandler(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExceptionHandler(node as Boo.Lang.Compiler.Ast.ExceptionHandler) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveExceptionHandler(node as Boo.Lang.Compiler.Ast.ExceptionHandler) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnIfStatement(node as Boo.Lang.Compiler.Ast.IfStatement) as void:
		if EnterIfStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Expression currentConditionValue = node.Condition;
			if currentConditionValue is not null:
				newValue = VisitNode(currentConditionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentConditionValue):
					node.Condition = newValue
			Block currentTrueBlockValue = node.TrueBlock;
			if currentTrueBlockValue is not null:
				newValue = VisitNode(currentTrueBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentTrueBlockValue):
					node.TrueBlock = newValue
			Block currentFalseBlockValue = node.FalseBlock;
			if currentFalseBlockValue is not null:
				newValue = VisitNode(currentFalseBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentFalseBlockValue):
					node.FalseBlock = newValue

			LeaveIfStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterIfStatement(node as Boo.Lang.Compiler.Ast.IfStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveIfStatement(node as Boo.Lang.Compiler.Ast.IfStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnUnlessStatement(node as Boo.Lang.Compiler.Ast.UnlessStatement) as void:
		if EnterUnlessStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Expression currentConditionValue = node.Condition;
			if currentConditionValue is not null:
				newValue = VisitNode(currentConditionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentConditionValue):
					node.Condition = newValue
			Block currentBlockValue = node.Block;
			if currentBlockValue is not null:
				newValue = VisitNode(currentBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentBlockValue):
					node.Block = newValue

			LeaveUnlessStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterUnlessStatement(node as Boo.Lang.Compiler.Ast.UnlessStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveUnlessStatement(node as Boo.Lang.Compiler.Ast.UnlessStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnForStatement(node as Boo.Lang.Compiler.Ast.ForStatement) as void:
		if EnterForStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Visit(node.Declarations)
			Expression currentIteratorValue = node.Iterator;
			if currentIteratorValue is not null:
				newValue = VisitNode(currentIteratorValue) cast Expression
				unless object.ReferenceEquals(newValue, currentIteratorValue):
					node.Iterator = newValue
			Block currentBlockValue = node.Block;
			if currentBlockValue is not null:
				newValue = VisitNode(currentBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentBlockValue):
					node.Block = newValue
			Block currentOrBlockValue = node.OrBlock;
			if currentOrBlockValue is not null:
				newValue = VisitNode(currentOrBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentOrBlockValue):
					node.OrBlock = newValue
			Block currentThenBlockValue = node.ThenBlock;
			if currentThenBlockValue is not null:
				newValue = VisitNode(currentThenBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentThenBlockValue):
					node.ThenBlock = newValue

			LeaveForStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterForStatement(node as Boo.Lang.Compiler.Ast.ForStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveForStatement(node as Boo.Lang.Compiler.Ast.ForStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnWhileStatement(node as Boo.Lang.Compiler.Ast.WhileStatement) as void:
		if EnterWhileStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Expression currentConditionValue = node.Condition;
			if currentConditionValue is not null:
				newValue = VisitNode(currentConditionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentConditionValue):
					node.Condition = newValue
			Block currentBlockValue = node.Block;
			if currentBlockValue is not null:
				newValue = VisitNode(currentBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentBlockValue):
					node.Block = newValue
			Block currentOrBlockValue = node.OrBlock;
			if currentOrBlockValue is not null:
				newValue = VisitNode(currentOrBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentOrBlockValue):
					node.OrBlock = newValue
			Block currentThenBlockValue = node.ThenBlock;
			if currentThenBlockValue is not null:
				newValue = VisitNode(currentThenBlockValue) cast Block
				unless object.ReferenceEquals(newValue, currentThenBlockValue):
					node.ThenBlock = newValue

			LeaveWhileStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterWhileStatement(node as Boo.Lang.Compiler.Ast.WhileStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveWhileStatement(node as Boo.Lang.Compiler.Ast.WhileStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBreakStatement(node as Boo.Lang.Compiler.Ast.BreakStatement) as void:
		if EnterBreakStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue

			LeaveBreakStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterBreakStatement(node as Boo.Lang.Compiler.Ast.BreakStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveBreakStatement(node as Boo.Lang.Compiler.Ast.BreakStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnContinueStatement(node as Boo.Lang.Compiler.Ast.ContinueStatement) as void:
		if EnterContinueStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue

			LeaveContinueStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterContinueStatement(node as Boo.Lang.Compiler.Ast.ContinueStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveContinueStatement(node as Boo.Lang.Compiler.Ast.ContinueStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnReturnStatement(node as Boo.Lang.Compiler.Ast.ReturnStatement) as void:
		if EnterReturnStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Expression currentExpressionValue = node.Expression;
			if currentExpressionValue is not null:
				newValue = VisitNode(currentExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExpressionValue):
					node.Expression = newValue

			LeaveReturnStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterReturnStatement(node as Boo.Lang.Compiler.Ast.ReturnStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveReturnStatement(node as Boo.Lang.Compiler.Ast.ReturnStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnYieldStatement(node as Boo.Lang.Compiler.Ast.YieldStatement) as void:
		if EnterYieldStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Expression currentExpressionValue = node.Expression;
			if currentExpressionValue is not null:
				newValue = VisitNode(currentExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExpressionValue):
					node.Expression = newValue

			LeaveYieldStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterYieldStatement(node as Boo.Lang.Compiler.Ast.YieldStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveYieldStatement(node as Boo.Lang.Compiler.Ast.YieldStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnRaiseStatement(node as Boo.Lang.Compiler.Ast.RaiseStatement) as void:
		if EnterRaiseStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Expression currentExceptionValue = node.Exception;
			if currentExceptionValue is not null:
				newValue = VisitNode(currentExceptionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExceptionValue):
					node.Exception = newValue

			LeaveRaiseStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterRaiseStatement(node as Boo.Lang.Compiler.Ast.RaiseStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveRaiseStatement(node as Boo.Lang.Compiler.Ast.RaiseStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnUnpackStatement(node as Boo.Lang.Compiler.Ast.UnpackStatement) as void:
		if EnterUnpackStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Visit(node.Declarations)
			Expression currentExpressionValue = node.Expression;
			if currentExpressionValue is not null:
				newValue = VisitNode(currentExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExpressionValue):
					node.Expression = newValue

			LeaveUnpackStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterUnpackStatement(node as Boo.Lang.Compiler.Ast.UnpackStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveUnpackStatement(node as Boo.Lang.Compiler.Ast.UnpackStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExpressionStatement(node as Boo.Lang.Compiler.Ast.ExpressionStatement) as void:
		if EnterExpressionStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue
			Expression currentExpressionValue = node.Expression;
			if currentExpressionValue is not null:
				newValue = VisitNode(currentExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExpressionValue):
					node.Expression = newValue

			LeaveExpressionStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExpressionStatement(node as Boo.Lang.Compiler.Ast.ExpressionStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveExpressionStatement(node as Boo.Lang.Compiler.Ast.ExpressionStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnOmittedExpression(node as Boo.Lang.Compiler.Ast.OmittedExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExpressionPair(node as Boo.Lang.Compiler.Ast.ExpressionPair) as void:
		if EnterExpressionPair(node):
			Expression currentFirstValue = node.First;
			if currentFirstValue is not null:
				newValue = VisitNode(currentFirstValue) cast Expression
				unless object.ReferenceEquals(newValue, currentFirstValue):
					node.First = newValue
			Expression currentSecondValue = node.Second;
			if currentSecondValue is not null:
				newValue = VisitNode(currentSecondValue) cast Expression
				unless object.ReferenceEquals(newValue, currentSecondValue):
					node.Second = newValue

			LeaveExpressionPair(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExpressionPair(node as Boo.Lang.Compiler.Ast.ExpressionPair) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveExpressionPair(node as Boo.Lang.Compiler.Ast.ExpressionPair) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMethodInvocationExpression(node as Boo.Lang.Compiler.Ast.MethodInvocationExpression) as void:
		if EnterMethodInvocationExpression(node):
			Expression currentTargetValue = node.Target;
			if currentTargetValue is not null:
				newValue = VisitNode(currentTargetValue) cast Expression
				unless object.ReferenceEquals(newValue, currentTargetValue):
					node.Target = newValue
			Visit(node.Arguments)
			Visit(node.NamedArguments)

			LeaveMethodInvocationExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterMethodInvocationExpression(node as Boo.Lang.Compiler.Ast.MethodInvocationExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveMethodInvocationExpression(node as Boo.Lang.Compiler.Ast.MethodInvocationExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnUnaryExpression(node as Boo.Lang.Compiler.Ast.UnaryExpression) as void:
		if EnterUnaryExpression(node):
			Expression currentOperandValue = node.Operand;
			if currentOperandValue is not null:
				newValue = VisitNode(currentOperandValue) cast Expression
				unless object.ReferenceEquals(newValue, currentOperandValue):
					node.Operand = newValue

			LeaveUnaryExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterUnaryExpression(node as Boo.Lang.Compiler.Ast.UnaryExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveUnaryExpression(node as Boo.Lang.Compiler.Ast.UnaryExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBinaryExpression(node as Boo.Lang.Compiler.Ast.BinaryExpression) as void:
		if EnterBinaryExpression(node):
			Expression currentLeftValue = node.Left;
			if currentLeftValue is not null:
				newValue = VisitNode(currentLeftValue) cast Expression
				unless object.ReferenceEquals(newValue, currentLeftValue):
					node.Left = newValue
			Expression currentRightValue = node.Right;
			if currentRightValue is not null:
				newValue = VisitNode(currentRightValue) cast Expression
				unless object.ReferenceEquals(newValue, currentRightValue):
					node.Right = newValue

			LeaveBinaryExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterBinaryExpression(node as Boo.Lang.Compiler.Ast.BinaryExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveBinaryExpression(node as Boo.Lang.Compiler.Ast.BinaryExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnConditionalExpression(node as Boo.Lang.Compiler.Ast.ConditionalExpression) as void:
		if EnterConditionalExpression(node):
			Expression currentConditionValue = node.Condition;
			if currentConditionValue is not null:
				newValue = VisitNode(currentConditionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentConditionValue):
					node.Condition = newValue
			Expression currentTrueValueValue = node.TrueValue;
			if currentTrueValueValue is not null:
				newValue = VisitNode(currentTrueValueValue) cast Expression
				unless object.ReferenceEquals(newValue, currentTrueValueValue):
					node.TrueValue = newValue
			Expression currentFalseValueValue = node.FalseValue;
			if currentFalseValueValue is not null:
				newValue = VisitNode(currentFalseValueValue) cast Expression
				unless object.ReferenceEquals(newValue, currentFalseValueValue):
					node.FalseValue = newValue

			LeaveConditionalExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterConditionalExpression(node as Boo.Lang.Compiler.Ast.ConditionalExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveConditionalExpression(node as Boo.Lang.Compiler.Ast.ConditionalExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnReferenceExpression(node as Boo.Lang.Compiler.Ast.ReferenceExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.MemberReferenceExpression) as void:
		if EnterMemberReferenceExpression(node):
			Expression currentTargetValue = node.Target;
			if currentTargetValue is not null:
				newValue = VisitNode(currentTargetValue) cast Expression
				unless object.ReferenceEquals(newValue, currentTargetValue):
					node.Target = newValue

			LeaveMemberReferenceExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.MemberReferenceExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.MemberReferenceExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericReferenceExpression(node as Boo.Lang.Compiler.Ast.GenericReferenceExpression) as void:
		if EnterGenericReferenceExpression(node):
			Expression currentTargetValue = node.Target;
			if currentTargetValue is not null:
				newValue = VisitNode(currentTargetValue) cast Expression
				unless object.ReferenceEquals(newValue, currentTargetValue):
					node.Target = newValue
			Visit(node.GenericArguments)

			LeaveGenericReferenceExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGenericReferenceExpression(node as Boo.Lang.Compiler.Ast.GenericReferenceExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveGenericReferenceExpression(node as Boo.Lang.Compiler.Ast.GenericReferenceExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnQuasiquoteExpression(node as Boo.Lang.Compiler.Ast.QuasiquoteExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStringLiteralExpression(node as Boo.Lang.Compiler.Ast.StringLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCharLiteralExpression(node as Boo.Lang.Compiler.Ast.CharLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTimeSpanLiteralExpression(node as Boo.Lang.Compiler.Ast.TimeSpanLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnIntegerLiteralExpression(node as Boo.Lang.Compiler.Ast.IntegerLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDoubleLiteralExpression(node as Boo.Lang.Compiler.Ast.DoubleLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnNullLiteralExpression(node as Boo.Lang.Compiler.Ast.NullLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSelfLiteralExpression(node as Boo.Lang.Compiler.Ast.SelfLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSuperLiteralExpression(node as Boo.Lang.Compiler.Ast.SuperLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBoolLiteralExpression(node as Boo.Lang.Compiler.Ast.BoolLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnRELiteralExpression(node as Boo.Lang.Compiler.Ast.RELiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceExpression(node as Boo.Lang.Compiler.Ast.SpliceExpression) as void:
		if EnterSpliceExpression(node):
			Expression currentExpressionValue = node.Expression;
			if currentExpressionValue is not null:
				newValue = VisitNode(currentExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExpressionValue):
					node.Expression = newValue

			LeaveSpliceExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceExpression(node as Boo.Lang.Compiler.Ast.SpliceExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveSpliceExpression(node as Boo.Lang.Compiler.Ast.SpliceExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceTypeReference(node as Boo.Lang.Compiler.Ast.SpliceTypeReference) as void:
		if EnterSpliceTypeReference(node):
			Expression currentExpressionValue = node.Expression;
			if currentExpressionValue is not null:
				newValue = VisitNode(currentExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExpressionValue):
					node.Expression = newValue

			LeaveSpliceTypeReference(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceTypeReference(node as Boo.Lang.Compiler.Ast.SpliceTypeReference) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveSpliceTypeReference(node as Boo.Lang.Compiler.Ast.SpliceTypeReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression) as void:
		if EnterSpliceMemberReferenceExpression(node):
			Expression currentTargetValue = node.Target;
			if currentTargetValue is not null:
				newValue = VisitNode(currentTargetValue) cast Expression
				unless object.ReferenceEquals(newValue, currentTargetValue):
					node.Target = newValue
			Expression currentNameExpressionValue = node.NameExpression;
			if currentNameExpressionValue is not null:
				newValue = VisitNode(currentNameExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentNameExpressionValue):
					node.NameExpression = newValue

			LeaveSpliceMemberReferenceExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveSpliceMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceTypeMember(node as Boo.Lang.Compiler.Ast.SpliceTypeMember) as void:
		if EnterSpliceTypeMember(node):
			Visit(node.Attributes)
			TypeMember currentTypeMemberValue = node.TypeMember;
			if currentTypeMemberValue is not null:
				newValue = VisitNode(currentTypeMemberValue) cast TypeMember
				unless object.ReferenceEquals(newValue, currentTypeMemberValue):
					node.TypeMember = newValue
			Expression currentNameExpressionValue = node.NameExpression;
			if currentNameExpressionValue is not null:
				newValue = VisitNode(currentNameExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentNameExpressionValue):
					node.NameExpression = newValue

			LeaveSpliceTypeMember(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceTypeMember(node as Boo.Lang.Compiler.Ast.SpliceTypeMember) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveSpliceTypeMember(node as Boo.Lang.Compiler.Ast.SpliceTypeMember) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceTypeDefinitionBody(node as Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody) as void:
		if EnterSpliceTypeDefinitionBody(node):
			Visit(node.Attributes)
			Expression currentExpressionValue = node.Expression;
			if currentExpressionValue is not null:
				newValue = VisitNode(currentExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExpressionValue):
					node.Expression = newValue

			LeaveSpliceTypeDefinitionBody(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceTypeDefinitionBody(node as Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveSpliceTypeDefinitionBody(node as Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceParameterDeclaration(node as Boo.Lang.Compiler.Ast.SpliceParameterDeclaration) as void:
		if EnterSpliceParameterDeclaration(node):
			TypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue
			Visit(node.Attributes)
			ParameterDeclaration currentParameterDeclarationValue = node.ParameterDeclaration;
			if currentParameterDeclarationValue is not null:
				newValue = VisitNode(currentParameterDeclarationValue) cast ParameterDeclaration
				unless object.ReferenceEquals(newValue, currentParameterDeclarationValue):
					node.ParameterDeclaration = newValue
			Expression currentNameExpressionValue = node.NameExpression;
			if currentNameExpressionValue is not null:
				newValue = VisitNode(currentNameExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentNameExpressionValue):
					node.NameExpression = newValue

			LeaveSpliceParameterDeclaration(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceParameterDeclaration(node as Boo.Lang.Compiler.Ast.SpliceParameterDeclaration) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveSpliceParameterDeclaration(node as Boo.Lang.Compiler.Ast.SpliceParameterDeclaration) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExpressionInterpolationExpression(node as Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression) as void:
		if EnterExpressionInterpolationExpression(node):
			Visit(node.Expressions)

			LeaveExpressionInterpolationExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExpressionInterpolationExpression(node as Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveExpressionInterpolationExpression(node as Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnHashLiteralExpression(node as Boo.Lang.Compiler.Ast.HashLiteralExpression) as void:
		if EnterHashLiteralExpression(node):
			Visit(node.Items)

			LeaveHashLiteralExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterHashLiteralExpression(node as Boo.Lang.Compiler.Ast.HashLiteralExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveHashLiteralExpression(node as Boo.Lang.Compiler.Ast.HashLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnListLiteralExpression(node as Boo.Lang.Compiler.Ast.ListLiteralExpression) as void:
		if EnterListLiteralExpression(node):
			Visit(node.Items)

			LeaveListLiteralExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterListLiteralExpression(node as Boo.Lang.Compiler.Ast.ListLiteralExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveListLiteralExpression(node as Boo.Lang.Compiler.Ast.ListLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCollectionInitializationExpression(node as Boo.Lang.Compiler.Ast.CollectionInitializationExpression) as void:
		if EnterCollectionInitializationExpression(node):
			Expression currentCollectionValue = node.Collection;
			if currentCollectionValue is not null:
				newValue = VisitNode(currentCollectionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentCollectionValue):
					node.Collection = newValue
			Expression currentInitializerValue = node.Initializer;
			if currentInitializerValue is not null:
				newValue = VisitNode(currentInitializerValue) cast Expression
				unless object.ReferenceEquals(newValue, currentInitializerValue):
					node.Initializer = newValue

			LeaveCollectionInitializationExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCollectionInitializationExpression(node as Boo.Lang.Compiler.Ast.CollectionInitializationExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveCollectionInitializationExpression(node as Boo.Lang.Compiler.Ast.CollectionInitializationExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnArrayLiteralExpression(node as Boo.Lang.Compiler.Ast.ArrayLiteralExpression) as void:
		if EnterArrayLiteralExpression(node):
			Visit(node.Items)
			ArrayTypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast ArrayTypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue

			LeaveArrayLiteralExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterArrayLiteralExpression(node as Boo.Lang.Compiler.Ast.ArrayLiteralExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveArrayLiteralExpression(node as Boo.Lang.Compiler.Ast.ArrayLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGeneratorExpression(node as Boo.Lang.Compiler.Ast.GeneratorExpression) as void:
		if EnterGeneratorExpression(node):
			Expression currentExpressionValue = node.Expression;
			if currentExpressionValue is not null:
				newValue = VisitNode(currentExpressionValue) cast Expression
				unless object.ReferenceEquals(newValue, currentExpressionValue):
					node.Expression = newValue
			Visit(node.Declarations)
			Expression currentIteratorValue = node.Iterator;
			if currentIteratorValue is not null:
				newValue = VisitNode(currentIteratorValue) cast Expression
				unless object.ReferenceEquals(newValue, currentIteratorValue):
					node.Iterator = newValue
			StatementModifier currentFilterValue = node.Filter;
			if currentFilterValue is not null:
				newValue = VisitNode(currentFilterValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentFilterValue):
					node.Filter = newValue

			LeaveGeneratorExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGeneratorExpression(node as Boo.Lang.Compiler.Ast.GeneratorExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveGeneratorExpression(node as Boo.Lang.Compiler.Ast.GeneratorExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExtendedGeneratorExpression(node as Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression) as void:
		if EnterExtendedGeneratorExpression(node):
			Visit(node.Items)

			LeaveExtendedGeneratorExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExtendedGeneratorExpression(node as Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveExtendedGeneratorExpression(node as Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSlice(node as Boo.Lang.Compiler.Ast.Slice) as void:
		if EnterSlice(node):
			Expression currentBeginValue = node.Begin;
			if currentBeginValue is not null:
				newValue = VisitNode(currentBeginValue) cast Expression
				unless object.ReferenceEquals(newValue, currentBeginValue):
					node.Begin = newValue
			Expression currentEndValue = node.End;
			if currentEndValue is not null:
				newValue = VisitNode(currentEndValue) cast Expression
				unless object.ReferenceEquals(newValue, currentEndValue):
					node.End = newValue
			Expression currentStepValue = node.Step;
			if currentStepValue is not null:
				newValue = VisitNode(currentStepValue) cast Expression
				unless object.ReferenceEquals(newValue, currentStepValue):
					node.Step = newValue

			LeaveSlice(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSlice(node as Boo.Lang.Compiler.Ast.Slice) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveSlice(node as Boo.Lang.Compiler.Ast.Slice) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSlicingExpression(node as Boo.Lang.Compiler.Ast.SlicingExpression) as void:
		if EnterSlicingExpression(node):
			Expression currentTargetValue = node.Target;
			if currentTargetValue is not null:
				newValue = VisitNode(currentTargetValue) cast Expression
				unless object.ReferenceEquals(newValue, currentTargetValue):
					node.Target = newValue
			Visit(node.Indices)

			LeaveSlicingExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSlicingExpression(node as Boo.Lang.Compiler.Ast.SlicingExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveSlicingExpression(node as Boo.Lang.Compiler.Ast.SlicingExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTryCastExpression(node as Boo.Lang.Compiler.Ast.TryCastExpression) as void:
		if EnterTryCastExpression(node):
			Expression currentTargetValue = node.Target;
			if currentTargetValue is not null:
				newValue = VisitNode(currentTargetValue) cast Expression
				unless object.ReferenceEquals(newValue, currentTargetValue):
					node.Target = newValue
			TypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue

			LeaveTryCastExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterTryCastExpression(node as Boo.Lang.Compiler.Ast.TryCastExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveTryCastExpression(node as Boo.Lang.Compiler.Ast.TryCastExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCastExpression(node as Boo.Lang.Compiler.Ast.CastExpression) as void:
		if EnterCastExpression(node):
			Expression currentTargetValue = node.Target;
			if currentTargetValue is not null:
				newValue = VisitNode(currentTargetValue) cast Expression
				unless object.ReferenceEquals(newValue, currentTargetValue):
					node.Target = newValue
			TypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue

			LeaveCastExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCastExpression(node as Boo.Lang.Compiler.Ast.CastExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveCastExpression(node as Boo.Lang.Compiler.Ast.CastExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTypeofExpression(node as Boo.Lang.Compiler.Ast.TypeofExpression) as void:
		if EnterTypeofExpression(node):
			TypeReference currentTypeValue = node.Type;
			if currentTypeValue is not null:
				newValue = VisitNode(currentTypeValue) cast TypeReference
				unless object.ReferenceEquals(newValue, currentTypeValue):
					node.Type = newValue

			LeaveTypeofExpression(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterTypeofExpression(node as Boo.Lang.Compiler.Ast.TypeofExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveTypeofExpression(node as Boo.Lang.Compiler.Ast.TypeofExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCustomStatement(node as Boo.Lang.Compiler.Ast.CustomStatement) as void:
		if EnterCustomStatement(node):
			StatementModifier currentModifierValue = node.Modifier;
			if currentModifierValue is not null:
				newValue = VisitNode(currentModifierValue) cast StatementModifier
				unless object.ReferenceEquals(newValue, currentModifierValue):
					node.Modifier = newValue

			LeaveCustomStatement(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCustomStatement(node as Boo.Lang.Compiler.Ast.CustomStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveCustomStatement(node as Boo.Lang.Compiler.Ast.CustomStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCustomExpression(node as Boo.Lang.Compiler.Ast.CustomExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStatementTypeMember(node as Boo.Lang.Compiler.Ast.StatementTypeMember) as void:
		if EnterStatementTypeMember(node):
			Visit(node.Attributes)
			Statement currentStatementValue = node.Statement;
			if currentStatementValue is not null:
				newValue = VisitNode(currentStatementValue) cast Statement
				unless object.ReferenceEquals(newValue, currentStatementValue):
					node.Statement = newValue

			LeaveStatementTypeMember(node);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterStatementTypeMember(node as Boo.Lang.Compiler.Ast.StatementTypeMember) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual LeaveStatementTypeMember(node as Boo.Lang.Compiler.Ast.StatementTypeMember) as void:
		pass
