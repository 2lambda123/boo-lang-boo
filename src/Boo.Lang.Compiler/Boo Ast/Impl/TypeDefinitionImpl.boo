#region license
// Copyright (c) 2009 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by Boo astgen.boo.
//
namespace Boo.Lang.Compiler.Ast

import System.Collections
import System.Runtime.Serialization

[System.Serializable]
public abstract partial class TypeDefinition (TypeMember, INodeWithGenericParameters):
	protected _members as TypeMemberCollection

	protected _baseTypes as TypeReferenceCollection

	protected _genericParameters as GenericParameterDeclarationCollection


	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public def CloneNode() as TypeDefinition:
		return Clone() cast TypeDefinition
	
	/// <summary>
	/// <see cref="Node.CleanClone"/>
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public def CleanClone() as TypeDefinition:
		return super.CleanClone() as TypeDefinition

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Matches(node as Node) as bool:
		return false if (node is null) or (NodeType != node.NodeType)
		other = node as TypeDefinition
		return NoMatch("TypeDefinition._modifiers") unless _modifiers == other._modifiers
		return NoMatch("TypeDefinition._name") unless _name == other._name
		return NoMatch("TypeDefinition._attributes") unless Node.AllMatch(_attributes, other._attributes)
		return NoMatch("TypeDefinition._members") unless Node.AllMatch(_members, other._members)
		return NoMatch("TypeDefinition._baseTypes") unless Node.AllMatch(_baseTypes, other._baseTypes)
		return NoMatch("TypeDefinition._genericParameters") unless Node.AllMatch(_genericParameters, other._genericParameters)
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Replace(existing as Node, newNode as Node) as bool:
		return true if super.Replace(existing, newNode)
		if _attributes is not null:
			item = existing as Attribute
			if item is not null:
				newItem = newNode as Attribute
				return true if _attributes.Replace(item, newItem)
		if _members is not null:
			item = existing as TypeMember
			if item is not null:
				newItem = newNode as TypeMember
				return true if _members.Replace(item, newItem)
		if _baseTypes is not null:
			item = existing as TypeReference
			if item is not null:
				newItem = newNode as TypeReference
				return true if _baseTypes.Replace(item, newItem)
		if _genericParameters is not null:
			item = existing as GenericParameterDeclaration
			if item is not null:
				newItem = newNode as GenericParameterDeclaration
				return true if _genericParameters.Replace(item, newItem)
		return false;

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override public def Clone() as object:

		raise System.InvalidOperationException("Cannot clone abstract class: TypeDefinition")

	

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	override internal def ClearTypeSystemBindings() as void:
		_annotations = null;
		_entity = null;
		if _attributes is not null:
			_attributes.ClearTypeSystemBindings()
		if _members is not null:
			_members.ClearTypeSystemBindings()
		if _baseTypes is not null:
			_baseTypes.ClearTypeSystemBindings()
		if _genericParameters is not null:
			_genericParameters.ClearTypeSystemBindings()



	[System.Xml.Serialization.XmlArray]
	[System.Xml.Serialization.XmlArrayItem(typeof(TypeMember))]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public Members as TypeMemberCollection:
		

		get:
			_members = TypeMemberCollection(self)() if _members is null
			return _members 
		set:
			if _members != value:
				_members = value;
				if _members is not null:
					_members.InitializeParent(this);



	[System.Xml.Serialization.XmlArray]
	[System.Xml.Serialization.XmlArrayItem(typeof(TypeReference))]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public BaseTypes as TypeReferenceCollection:
		

		get:
			_baseTypes = TypeReferenceCollection(self)() if _baseTypes is null
			return _baseTypes 
		set:
			if _baseTypes != value:
				_baseTypes = value;
				if _baseTypes is not null:
					_baseTypes.InitializeParent(this);



	[System.Xml.Serialization.XmlArray]
	[System.Xml.Serialization.XmlArrayItem(typeof(GenericParameterDeclaration))]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public GenericParameters as GenericParameterDeclarationCollection:
		

		get:
			_genericParameters = GenericParameterDeclarationCollection(self)() if _genericParameters is null
			return _genericParameters 
		set:
			if _genericParameters != value:
				_genericParameters = value;
				if _genericParameters is not null:
					_genericParameters.InitializeParent(this);


