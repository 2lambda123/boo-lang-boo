#region license
// Copyright (c) 2009 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by Boo astgen.boo.
//

namespace Boo.Lang.Compiler.Ast

import System

public partial class DepthFirstVisitor(IAstVisitor):

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCompileUnit(node as Boo.Lang.Compiler.Ast.CompileUnit) as void:
		if EnterCompileUnit(node):
			Visit(node.Modules)
			LeaveCompileUnit(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCompileUnit(node as Boo.Lang.Compiler.Ast.CompileUnit) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveCompileUnit(node as Boo.Lang.Compiler.Ast.CompileUnit) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTypeMemberStatement(node as Boo.Lang.Compiler.Ast.TypeMemberStatement) as void:
		if EnterTypeMemberStatement(node):
			Visit(node.Modifier)
			Visit(node.TypeMember)
			LeaveTypeMemberStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterTypeMemberStatement(node as Boo.Lang.Compiler.Ast.TypeMemberStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveTypeMemberStatement(node as Boo.Lang.Compiler.Ast.TypeMemberStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExplicitMemberInfo(node as Boo.Lang.Compiler.Ast.ExplicitMemberInfo) as void:
		if EnterExplicitMemberInfo(node):
			Visit(node.InterfaceType)
			LeaveExplicitMemberInfo(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExplicitMemberInfo(node as Boo.Lang.Compiler.Ast.ExplicitMemberInfo) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveExplicitMemberInfo(node as Boo.Lang.Compiler.Ast.ExplicitMemberInfo) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSimpleTypeReference(node as Boo.Lang.Compiler.Ast.SimpleTypeReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnArrayTypeReference(node as Boo.Lang.Compiler.Ast.ArrayTypeReference) as void:
		if EnterArrayTypeReference(node):
			Visit(node.ElementType)
			Visit(node.Rank)
			LeaveArrayTypeReference(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterArrayTypeReference(node as Boo.Lang.Compiler.Ast.ArrayTypeReference) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveArrayTypeReference(node as Boo.Lang.Compiler.Ast.ArrayTypeReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCallableTypeReference(node as Boo.Lang.Compiler.Ast.CallableTypeReference) as void:
		if EnterCallableTypeReference(node):
			Visit(node.Parameters)
			Visit(node.ReturnType)
			LeaveCallableTypeReference(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCallableTypeReference(node as Boo.Lang.Compiler.Ast.CallableTypeReference) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveCallableTypeReference(node as Boo.Lang.Compiler.Ast.CallableTypeReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericTypeReference(node as Boo.Lang.Compiler.Ast.GenericTypeReference) as void:
		if EnterGenericTypeReference(node):
			Visit(node.GenericArguments)
			LeaveGenericTypeReference(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGenericTypeReference(node as Boo.Lang.Compiler.Ast.GenericTypeReference) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveGenericTypeReference(node as Boo.Lang.Compiler.Ast.GenericTypeReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericTypeDefinitionReference(node as Boo.Lang.Compiler.Ast.GenericTypeDefinitionReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCallableDefinition(node as Boo.Lang.Compiler.Ast.CallableDefinition) as void:
		if EnterCallableDefinition(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Visit(node.GenericParameters)
			Visit(node.ReturnType)
			Visit(node.ReturnTypeAttributes)
			LeaveCallableDefinition(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCallableDefinition(node as Boo.Lang.Compiler.Ast.CallableDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveCallableDefinition(node as Boo.Lang.Compiler.Ast.CallableDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnNamespaceDeclaration(node as Boo.Lang.Compiler.Ast.NamespaceDeclaration) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnImport(node as Boo.Lang.Compiler.Ast.Import) as void:
		if EnterImport(node):
			Visit(node.Expression)
			Visit(node.AssemblyReference)
			Visit(node.Alias)
			LeaveImport(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterImport(node as Boo.Lang.Compiler.Ast.Import) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveImport(node as Boo.Lang.Compiler.Ast.Import) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnModule(node as Boo.Lang.Compiler.Ast.Module) as void:
		if EnterModule(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)
			Visit(node.Namespace)
			Visit(node.Imports)
			Visit(node.Globals)
			Visit(node.AssemblyAttributes)
			LeaveModule(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterModule(node as Boo.Lang.Compiler.Ast.Module) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveModule(node as Boo.Lang.Compiler.Ast.Module) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnClassDefinition(node as Boo.Lang.Compiler.Ast.ClassDefinition) as void:
		if EnterClassDefinition(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)
			LeaveClassDefinition(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterClassDefinition(node as Boo.Lang.Compiler.Ast.ClassDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveClassDefinition(node as Boo.Lang.Compiler.Ast.ClassDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStructDefinition(node as Boo.Lang.Compiler.Ast.StructDefinition) as void:
		if EnterStructDefinition(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)
			LeaveStructDefinition(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterStructDefinition(node as Boo.Lang.Compiler.Ast.StructDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveStructDefinition(node as Boo.Lang.Compiler.Ast.StructDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnInterfaceDefinition(node as Boo.Lang.Compiler.Ast.InterfaceDefinition) as void:
		if EnterInterfaceDefinition(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)
			LeaveInterfaceDefinition(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterInterfaceDefinition(node as Boo.Lang.Compiler.Ast.InterfaceDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveInterfaceDefinition(node as Boo.Lang.Compiler.Ast.InterfaceDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnEnumDefinition(node as Boo.Lang.Compiler.Ast.EnumDefinition) as void:
		if EnterEnumDefinition(node):
			Visit(node.Attributes)
			Visit(node.Members)
			Visit(node.BaseTypes)
			Visit(node.GenericParameters)
			LeaveEnumDefinition(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterEnumDefinition(node as Boo.Lang.Compiler.Ast.EnumDefinition) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveEnumDefinition(node as Boo.Lang.Compiler.Ast.EnumDefinition) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnEnumMember(node as Boo.Lang.Compiler.Ast.EnumMember) as void:
		if EnterEnumMember(node):
			Visit(node.Attributes)
			Visit(node.Initializer)
			LeaveEnumMember(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterEnumMember(node as Boo.Lang.Compiler.Ast.EnumMember) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveEnumMember(node as Boo.Lang.Compiler.Ast.EnumMember) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnField(node as Boo.Lang.Compiler.Ast.Field) as void:
		if EnterField(node):
			Visit(node.Attributes)
			Visit(node.Type)
			Visit(node.Initializer)
			LeaveField(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterField(node as Boo.Lang.Compiler.Ast.Field) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveField(node as Boo.Lang.Compiler.Ast.Field) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnProperty(node as Boo.Lang.Compiler.Ast.Property) as void:
		if EnterProperty(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Visit(node.Getter)
			Visit(node.Setter)
			Visit(node.Type)
			Visit(node.ExplicitInfo)
			LeaveProperty(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterProperty(node as Boo.Lang.Compiler.Ast.Property) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveProperty(node as Boo.Lang.Compiler.Ast.Property) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnEvent(node as Boo.Lang.Compiler.Ast.Event) as void:
		if EnterEvent(node):
			Visit(node.Attributes)
			Visit(node.Add)
			Visit(node.Remove)
			Visit(node.Raise)
			Visit(node.Type)
			LeaveEvent(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterEvent(node as Boo.Lang.Compiler.Ast.Event) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveEvent(node as Boo.Lang.Compiler.Ast.Event) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnLocal(node as Boo.Lang.Compiler.Ast.Local) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBlockExpression(node as Boo.Lang.Compiler.Ast.BlockExpression) as void:
		if EnterBlockExpression(node):
			Visit(node.Parameters)
			Visit(node.ReturnType)
			Visit(node.Body)
			LeaveBlockExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterBlockExpression(node as Boo.Lang.Compiler.Ast.BlockExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveBlockExpression(node as Boo.Lang.Compiler.Ast.BlockExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMethod(node as Boo.Lang.Compiler.Ast.Method) as void:
		if EnterMethod(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Visit(node.GenericParameters)
			Visit(node.ReturnType)
			Visit(node.ReturnTypeAttributes)
			Visit(node.Body)
			Visit(node.Locals)
			Visit(node.ExplicitInfo)
			LeaveMethod(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterMethod(node as Boo.Lang.Compiler.Ast.Method) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveMethod(node as Boo.Lang.Compiler.Ast.Method) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnConstructor(node as Boo.Lang.Compiler.Ast.Constructor) as void:
		if EnterConstructor(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Visit(node.GenericParameters)
			Visit(node.ReturnType)
			Visit(node.ReturnTypeAttributes)
			Visit(node.Body)
			Visit(node.Locals)
			Visit(node.ExplicitInfo)
			LeaveConstructor(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterConstructor(node as Boo.Lang.Compiler.Ast.Constructor) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveConstructor(node as Boo.Lang.Compiler.Ast.Constructor) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDestructor(node as Boo.Lang.Compiler.Ast.Destructor) as void:
		if EnterDestructor(node):
			Visit(node.Attributes)
			Visit(node.Parameters)
			Visit(node.GenericParameters)
			Visit(node.ReturnType)
			Visit(node.ReturnTypeAttributes)
			Visit(node.Body)
			Visit(node.Locals)
			Visit(node.ExplicitInfo)
			LeaveDestructor(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterDestructor(node as Boo.Lang.Compiler.Ast.Destructor) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveDestructor(node as Boo.Lang.Compiler.Ast.Destructor) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnParameterDeclaration(node as Boo.Lang.Compiler.Ast.ParameterDeclaration) as void:
		if EnterParameterDeclaration(node):
			Visit(node.Type)
			Visit(node.Attributes)
			LeaveParameterDeclaration(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterParameterDeclaration(node as Boo.Lang.Compiler.Ast.ParameterDeclaration) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveParameterDeclaration(node as Boo.Lang.Compiler.Ast.ParameterDeclaration) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericParameterDeclaration(node as Boo.Lang.Compiler.Ast.GenericParameterDeclaration) as void:
		if EnterGenericParameterDeclaration(node):
			Visit(node.BaseTypes)
			LeaveGenericParameterDeclaration(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGenericParameterDeclaration(node as Boo.Lang.Compiler.Ast.GenericParameterDeclaration) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveGenericParameterDeclaration(node as Boo.Lang.Compiler.Ast.GenericParameterDeclaration) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDeclaration(node as Boo.Lang.Compiler.Ast.Declaration) as void:
		if EnterDeclaration(node):
			Visit(node.Type)
			LeaveDeclaration(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterDeclaration(node as Boo.Lang.Compiler.Ast.Declaration) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveDeclaration(node as Boo.Lang.Compiler.Ast.Declaration) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnAttribute(node as Boo.Lang.Compiler.Ast.Attribute) as void:
		if EnterAttribute(node):
			Visit(node.Arguments)
			Visit(node.NamedArguments)
			LeaveAttribute(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterAttribute(node as Boo.Lang.Compiler.Ast.Attribute) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveAttribute(node as Boo.Lang.Compiler.Ast.Attribute) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStatementModifier(node as Boo.Lang.Compiler.Ast.StatementModifier) as void:
		if EnterStatementModifier(node):
			Visit(node.Condition)
			LeaveStatementModifier(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterStatementModifier(node as Boo.Lang.Compiler.Ast.StatementModifier) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveStatementModifier(node as Boo.Lang.Compiler.Ast.StatementModifier) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGotoStatement(node as Boo.Lang.Compiler.Ast.GotoStatement) as void:
		if EnterGotoStatement(node):
			Visit(node.Modifier)
			Visit(node.Label)
			LeaveGotoStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGotoStatement(node as Boo.Lang.Compiler.Ast.GotoStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveGotoStatement(node as Boo.Lang.Compiler.Ast.GotoStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnLabelStatement(node as Boo.Lang.Compiler.Ast.LabelStatement) as void:
		if EnterLabelStatement(node):
			Visit(node.Modifier)
			LeaveLabelStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterLabelStatement(node as Boo.Lang.Compiler.Ast.LabelStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveLabelStatement(node as Boo.Lang.Compiler.Ast.LabelStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBlock(node as Boo.Lang.Compiler.Ast.Block) as void:
		if EnterBlock(node):
			Visit(node.Modifier)
			Visit(node.Statements)
			LeaveBlock(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterBlock(node as Boo.Lang.Compiler.Ast.Block) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveBlock(node as Boo.Lang.Compiler.Ast.Block) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDeclarationStatement(node as Boo.Lang.Compiler.Ast.DeclarationStatement) as void:
		if EnterDeclarationStatement(node):
			Visit(node.Modifier)
			Visit(node.Declaration)
			Visit(node.Initializer)
			LeaveDeclarationStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterDeclarationStatement(node as Boo.Lang.Compiler.Ast.DeclarationStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveDeclarationStatement(node as Boo.Lang.Compiler.Ast.DeclarationStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMacroStatement(node as Boo.Lang.Compiler.Ast.MacroStatement) as void:
		if EnterMacroStatement(node):
			Visit(node.Modifier)
			Visit(node.Arguments)
			Visit(node.Body)
			LeaveMacroStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterMacroStatement(node as Boo.Lang.Compiler.Ast.MacroStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveMacroStatement(node as Boo.Lang.Compiler.Ast.MacroStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTryStatement(node as Boo.Lang.Compiler.Ast.TryStatement) as void:
		if EnterTryStatement(node):
			Visit(node.Modifier)
			Visit(node.ProtectedBlock)
			Visit(node.ExceptionHandlers)
			Visit(node.FailureBlock)
			Visit(node.EnsureBlock)
			LeaveTryStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterTryStatement(node as Boo.Lang.Compiler.Ast.TryStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveTryStatement(node as Boo.Lang.Compiler.Ast.TryStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExceptionHandler(node as Boo.Lang.Compiler.Ast.ExceptionHandler) as void:
		if EnterExceptionHandler(node):
			Visit(node.Declaration)
			Visit(node.FilterCondition)
			Visit(node.Block)
			LeaveExceptionHandler(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExceptionHandler(node as Boo.Lang.Compiler.Ast.ExceptionHandler) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveExceptionHandler(node as Boo.Lang.Compiler.Ast.ExceptionHandler) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnIfStatement(node as Boo.Lang.Compiler.Ast.IfStatement) as void:
		if EnterIfStatement(node):
			Visit(node.Modifier)
			Visit(node.Condition)
			Visit(node.TrueBlock)
			Visit(node.FalseBlock)
			LeaveIfStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterIfStatement(node as Boo.Lang.Compiler.Ast.IfStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveIfStatement(node as Boo.Lang.Compiler.Ast.IfStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnUnlessStatement(node as Boo.Lang.Compiler.Ast.UnlessStatement) as void:
		if EnterUnlessStatement(node):
			Visit(node.Modifier)
			Visit(node.Condition)
			Visit(node.Block)
			LeaveUnlessStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterUnlessStatement(node as Boo.Lang.Compiler.Ast.UnlessStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveUnlessStatement(node as Boo.Lang.Compiler.Ast.UnlessStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnForStatement(node as Boo.Lang.Compiler.Ast.ForStatement) as void:
		if EnterForStatement(node):
			Visit(node.Modifier)
			Visit(node.Declarations)
			Visit(node.Iterator)
			Visit(node.Block)
			Visit(node.OrBlock)
			Visit(node.ThenBlock)
			LeaveForStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterForStatement(node as Boo.Lang.Compiler.Ast.ForStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveForStatement(node as Boo.Lang.Compiler.Ast.ForStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnWhileStatement(node as Boo.Lang.Compiler.Ast.WhileStatement) as void:
		if EnterWhileStatement(node):
			Visit(node.Modifier)
			Visit(node.Condition)
			Visit(node.Block)
			Visit(node.OrBlock)
			Visit(node.ThenBlock)
			LeaveWhileStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterWhileStatement(node as Boo.Lang.Compiler.Ast.WhileStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveWhileStatement(node as Boo.Lang.Compiler.Ast.WhileStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBreakStatement(node as Boo.Lang.Compiler.Ast.BreakStatement) as void:
		if EnterBreakStatement(node):
			Visit(node.Modifier)
			LeaveBreakStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterBreakStatement(node as Boo.Lang.Compiler.Ast.BreakStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveBreakStatement(node as Boo.Lang.Compiler.Ast.BreakStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnContinueStatement(node as Boo.Lang.Compiler.Ast.ContinueStatement) as void:
		if EnterContinueStatement(node):
			Visit(node.Modifier)
			LeaveContinueStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterContinueStatement(node as Boo.Lang.Compiler.Ast.ContinueStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveContinueStatement(node as Boo.Lang.Compiler.Ast.ContinueStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnReturnStatement(node as Boo.Lang.Compiler.Ast.ReturnStatement) as void:
		if EnterReturnStatement(node):
			Visit(node.Modifier)
			Visit(node.Expression)
			LeaveReturnStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterReturnStatement(node as Boo.Lang.Compiler.Ast.ReturnStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveReturnStatement(node as Boo.Lang.Compiler.Ast.ReturnStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnYieldStatement(node as Boo.Lang.Compiler.Ast.YieldStatement) as void:
		if EnterYieldStatement(node):
			Visit(node.Modifier)
			Visit(node.Expression)
			LeaveYieldStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterYieldStatement(node as Boo.Lang.Compiler.Ast.YieldStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveYieldStatement(node as Boo.Lang.Compiler.Ast.YieldStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnRaiseStatement(node as Boo.Lang.Compiler.Ast.RaiseStatement) as void:
		if EnterRaiseStatement(node):
			Visit(node.Modifier)
			Visit(node.Exception)
			LeaveRaiseStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterRaiseStatement(node as Boo.Lang.Compiler.Ast.RaiseStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveRaiseStatement(node as Boo.Lang.Compiler.Ast.RaiseStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnUnpackStatement(node as Boo.Lang.Compiler.Ast.UnpackStatement) as void:
		if EnterUnpackStatement(node):
			Visit(node.Modifier)
			Visit(node.Declarations)
			Visit(node.Expression)
			LeaveUnpackStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterUnpackStatement(node as Boo.Lang.Compiler.Ast.UnpackStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveUnpackStatement(node as Boo.Lang.Compiler.Ast.UnpackStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExpressionStatement(node as Boo.Lang.Compiler.Ast.ExpressionStatement) as void:
		if EnterExpressionStatement(node):
			Visit(node.Modifier)
			Visit(node.Expression)
			LeaveExpressionStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExpressionStatement(node as Boo.Lang.Compiler.Ast.ExpressionStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveExpressionStatement(node as Boo.Lang.Compiler.Ast.ExpressionStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnOmittedExpression(node as Boo.Lang.Compiler.Ast.OmittedExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExpressionPair(node as Boo.Lang.Compiler.Ast.ExpressionPair) as void:
		if EnterExpressionPair(node):
			Visit(node.First)
			Visit(node.Second)
			LeaveExpressionPair(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExpressionPair(node as Boo.Lang.Compiler.Ast.ExpressionPair) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveExpressionPair(node as Boo.Lang.Compiler.Ast.ExpressionPair) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMethodInvocationExpression(node as Boo.Lang.Compiler.Ast.MethodInvocationExpression) as void:
		if EnterMethodInvocationExpression(node):
			Visit(node.Target)
			Visit(node.Arguments)
			Visit(node.NamedArguments)
			LeaveMethodInvocationExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterMethodInvocationExpression(node as Boo.Lang.Compiler.Ast.MethodInvocationExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveMethodInvocationExpression(node as Boo.Lang.Compiler.Ast.MethodInvocationExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnUnaryExpression(node as Boo.Lang.Compiler.Ast.UnaryExpression) as void:
		if EnterUnaryExpression(node):
			Visit(node.Operand)
			LeaveUnaryExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterUnaryExpression(node as Boo.Lang.Compiler.Ast.UnaryExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveUnaryExpression(node as Boo.Lang.Compiler.Ast.UnaryExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBinaryExpression(node as Boo.Lang.Compiler.Ast.BinaryExpression) as void:
		if EnterBinaryExpression(node):
			Visit(node.Left)
			Visit(node.Right)
			LeaveBinaryExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterBinaryExpression(node as Boo.Lang.Compiler.Ast.BinaryExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveBinaryExpression(node as Boo.Lang.Compiler.Ast.BinaryExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnConditionalExpression(node as Boo.Lang.Compiler.Ast.ConditionalExpression) as void:
		if EnterConditionalExpression(node):
			Visit(node.Condition)
			Visit(node.TrueValue)
			Visit(node.FalseValue)
			LeaveConditionalExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterConditionalExpression(node as Boo.Lang.Compiler.Ast.ConditionalExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveConditionalExpression(node as Boo.Lang.Compiler.Ast.ConditionalExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnReferenceExpression(node as Boo.Lang.Compiler.Ast.ReferenceExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.MemberReferenceExpression) as void:
		if EnterMemberReferenceExpression(node):
			Visit(node.Target)
			LeaveMemberReferenceExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.MemberReferenceExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.MemberReferenceExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericReferenceExpression(node as Boo.Lang.Compiler.Ast.GenericReferenceExpression) as void:
		if EnterGenericReferenceExpression(node):
			Visit(node.Target)
			Visit(node.GenericArguments)
			LeaveGenericReferenceExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGenericReferenceExpression(node as Boo.Lang.Compiler.Ast.GenericReferenceExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveGenericReferenceExpression(node as Boo.Lang.Compiler.Ast.GenericReferenceExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnQuasiquoteExpression(node as Boo.Lang.Compiler.Ast.QuasiquoteExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStringLiteralExpression(node as Boo.Lang.Compiler.Ast.StringLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCharLiteralExpression(node as Boo.Lang.Compiler.Ast.CharLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTimeSpanLiteralExpression(node as Boo.Lang.Compiler.Ast.TimeSpanLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnIntegerLiteralExpression(node as Boo.Lang.Compiler.Ast.IntegerLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDoubleLiteralExpression(node as Boo.Lang.Compiler.Ast.DoubleLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnNullLiteralExpression(node as Boo.Lang.Compiler.Ast.NullLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSelfLiteralExpression(node as Boo.Lang.Compiler.Ast.SelfLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSuperLiteralExpression(node as Boo.Lang.Compiler.Ast.SuperLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBoolLiteralExpression(node as Boo.Lang.Compiler.Ast.BoolLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnRELiteralExpression(node as Boo.Lang.Compiler.Ast.RELiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceExpression(node as Boo.Lang.Compiler.Ast.SpliceExpression) as void:
		if EnterSpliceExpression(node):
			Visit(node.Expression)
			LeaveSpliceExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceExpression(node as Boo.Lang.Compiler.Ast.SpliceExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveSpliceExpression(node as Boo.Lang.Compiler.Ast.SpliceExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceTypeReference(node as Boo.Lang.Compiler.Ast.SpliceTypeReference) as void:
		if EnterSpliceTypeReference(node):
			Visit(node.Expression)
			LeaveSpliceTypeReference(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceTypeReference(node as Boo.Lang.Compiler.Ast.SpliceTypeReference) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveSpliceTypeReference(node as Boo.Lang.Compiler.Ast.SpliceTypeReference) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression) as void:
		if EnterSpliceMemberReferenceExpression(node):
			Visit(node.Target)
			Visit(node.NameExpression)
			LeaveSpliceMemberReferenceExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveSpliceMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceTypeMember(node as Boo.Lang.Compiler.Ast.SpliceTypeMember) as void:
		if EnterSpliceTypeMember(node):
			Visit(node.Attributes)
			Visit(node.TypeMember)
			Visit(node.NameExpression)
			LeaveSpliceTypeMember(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceTypeMember(node as Boo.Lang.Compiler.Ast.SpliceTypeMember) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveSpliceTypeMember(node as Boo.Lang.Compiler.Ast.SpliceTypeMember) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceTypeDefinitionBody(node as Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody) as void:
		if EnterSpliceTypeDefinitionBody(node):
			Visit(node.Attributes)
			Visit(node.Expression)
			LeaveSpliceTypeDefinitionBody(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceTypeDefinitionBody(node as Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveSpliceTypeDefinitionBody(node as Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceParameterDeclaration(node as Boo.Lang.Compiler.Ast.SpliceParameterDeclaration) as void:
		if EnterSpliceParameterDeclaration(node):
			Visit(node.Type)
			Visit(node.Attributes)
			Visit(node.ParameterDeclaration)
			Visit(node.NameExpression)
			LeaveSpliceParameterDeclaration(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSpliceParameterDeclaration(node as Boo.Lang.Compiler.Ast.SpliceParameterDeclaration) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveSpliceParameterDeclaration(node as Boo.Lang.Compiler.Ast.SpliceParameterDeclaration) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExpressionInterpolationExpression(node as Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression) as void:
		if EnterExpressionInterpolationExpression(node):
			Visit(node.Expressions)
			LeaveExpressionInterpolationExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExpressionInterpolationExpression(node as Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveExpressionInterpolationExpression(node as Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnHashLiteralExpression(node as Boo.Lang.Compiler.Ast.HashLiteralExpression) as void:
		if EnterHashLiteralExpression(node):
			Visit(node.Items)
			LeaveHashLiteralExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterHashLiteralExpression(node as Boo.Lang.Compiler.Ast.HashLiteralExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveHashLiteralExpression(node as Boo.Lang.Compiler.Ast.HashLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnListLiteralExpression(node as Boo.Lang.Compiler.Ast.ListLiteralExpression) as void:
		if EnterListLiteralExpression(node):
			Visit(node.Items)
			LeaveListLiteralExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterListLiteralExpression(node as Boo.Lang.Compiler.Ast.ListLiteralExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveListLiteralExpression(node as Boo.Lang.Compiler.Ast.ListLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCollectionInitializationExpression(node as Boo.Lang.Compiler.Ast.CollectionInitializationExpression) as void:
		if EnterCollectionInitializationExpression(node):
			Visit(node.Collection)
			Visit(node.Initializer)
			LeaveCollectionInitializationExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCollectionInitializationExpression(node as Boo.Lang.Compiler.Ast.CollectionInitializationExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveCollectionInitializationExpression(node as Boo.Lang.Compiler.Ast.CollectionInitializationExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnArrayLiteralExpression(node as Boo.Lang.Compiler.Ast.ArrayLiteralExpression) as void:
		if EnterArrayLiteralExpression(node):
			Visit(node.Items)
			Visit(node.Type)
			LeaveArrayLiteralExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterArrayLiteralExpression(node as Boo.Lang.Compiler.Ast.ArrayLiteralExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveArrayLiteralExpression(node as Boo.Lang.Compiler.Ast.ArrayLiteralExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGeneratorExpression(node as Boo.Lang.Compiler.Ast.GeneratorExpression) as void:
		if EnterGeneratorExpression(node):
			Visit(node.Expression)
			Visit(node.Declarations)
			Visit(node.Iterator)
			Visit(node.Filter)
			LeaveGeneratorExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterGeneratorExpression(node as Boo.Lang.Compiler.Ast.GeneratorExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveGeneratorExpression(node as Boo.Lang.Compiler.Ast.GeneratorExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExtendedGeneratorExpression(node as Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression) as void:
		if EnterExtendedGeneratorExpression(node):
			Visit(node.Items)
			LeaveExtendedGeneratorExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterExtendedGeneratorExpression(node as Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveExtendedGeneratorExpression(node as Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSlice(node as Boo.Lang.Compiler.Ast.Slice) as void:
		if EnterSlice(node):
			Visit(node.Begin)
			Visit(node.End)
			Visit(node.Step)
			LeaveSlice(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSlice(node as Boo.Lang.Compiler.Ast.Slice) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveSlice(node as Boo.Lang.Compiler.Ast.Slice) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSlicingExpression(node as Boo.Lang.Compiler.Ast.SlicingExpression) as void:
		if EnterSlicingExpression(node):
			Visit(node.Target)
			Visit(node.Indices)
			LeaveSlicingExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterSlicingExpression(node as Boo.Lang.Compiler.Ast.SlicingExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveSlicingExpression(node as Boo.Lang.Compiler.Ast.SlicingExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTryCastExpression(node as Boo.Lang.Compiler.Ast.TryCastExpression) as void:
		if EnterTryCastExpression(node):
			Visit(node.Target)
			Visit(node.Type)
			LeaveTryCastExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterTryCastExpression(node as Boo.Lang.Compiler.Ast.TryCastExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveTryCastExpression(node as Boo.Lang.Compiler.Ast.TryCastExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCastExpression(node as Boo.Lang.Compiler.Ast.CastExpression) as void:
		if EnterCastExpression(node):
			Visit(node.Target)
			Visit(node.Type)
			LeaveCastExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCastExpression(node as Boo.Lang.Compiler.Ast.CastExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveCastExpression(node as Boo.Lang.Compiler.Ast.CastExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTypeofExpression(node as Boo.Lang.Compiler.Ast.TypeofExpression) as void:
		if EnterTypeofExpression(node):
			Visit(node.Type)
			LeaveTypeofExpression(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterTypeofExpression(node as Boo.Lang.Compiler.Ast.TypeofExpression) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveTypeofExpression(node as Boo.Lang.Compiler.Ast.TypeofExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCustomStatement(node as Boo.Lang.Compiler.Ast.CustomStatement) as void:
		if EnterCustomStatement(node):
			Visit(node.Modifier)
			LeaveCustomStatement(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterCustomStatement(node as Boo.Lang.Compiler.Ast.CustomStatement) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveCustomStatement(node as Boo.Lang.Compiler.Ast.CustomStatement) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCustomExpression(node as Boo.Lang.Compiler.Ast.CustomExpression) as void:
		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStatementTypeMember(node as Boo.Lang.Compiler.Ast.StatementTypeMember) as void:
		if EnterStatementTypeMember(node):
			Visit(node.Attributes)
			Visit(node.Statement)
			LeaveStatementTypeMember(node)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def EnterStatementTypeMember(node as Boo.Lang.Compiler.Ast.StatementTypeMember) as bool:
		return true

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def LeaveStatementTypeMember(node as Boo.Lang.Compiler.Ast.StatementTypeMember) as void:
		pass
