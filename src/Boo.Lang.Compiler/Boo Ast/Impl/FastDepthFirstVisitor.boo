#region license
// Copyright (c) 2009 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by Boo astgen.boo.
//

namespace Boo.Lang.Compiler.Ast

import System

/// <summary>
/// Visitor implementation that avoids the overhead of cloning collections
/// before visiting them.
///
/// Avoid mutating collections when using this implementation.
/// </summary>
public partial class FastDepthFirstVisitor(IAstVisitor):

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCompileUnit(node as Boo.Lang.Compiler.Ast.CompileUnit) as void:
		lModules = node.Modules
		if lModules is not null:
			innerList1 = lModules.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTypeMemberStatement(node as Boo.Lang.Compiler.Ast.TypeMemberStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lTypeMember = node.TypeMember
		if lTypeMember is not null:
			lTypeMember.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExplicitMemberInfo(node as Boo.Lang.Compiler.Ast.ExplicitMemberInfo) as void:
		lInterfaceType = node.InterfaceType
		if lInterfaceType is not null:
			lInterfaceType.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSimpleTypeReference(node as Boo.Lang.Compiler.Ast.SimpleTypeReference) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnArrayTypeReference(node as Boo.Lang.Compiler.Ast.ArrayTypeReference) as void:
		lElementType = node.ElementType
		if lElementType is not null:
			lElementType.Accept(self)
		lRank = node.Rank
		if lRank is not null:
			lRank.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCallableTypeReference(node as Boo.Lang.Compiler.Ast.CallableTypeReference) as void:
		lParameters = node.Parameters
		if lParameters is not null:
			innerList1 = lParameters.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericTypeReference(node as Boo.Lang.Compiler.Ast.GenericTypeReference) as void:
		lGenericArguments = node.GenericArguments
		if lGenericArguments is not null:
			innerList1 = lGenericArguments.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericTypeDefinitionReference(node as Boo.Lang.Compiler.Ast.GenericTypeDefinitionReference) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCallableDefinition(node as Boo.Lang.Compiler.Ast.CallableDefinition) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList2 = lParameters.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList3 = lGenericParameters.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lReturnTypeAttributes = node.ReturnTypeAttributes
		if lReturnTypeAttributes is not null:
			innerList5 = lReturnTypeAttributes.InnerList
			for i in range(0, innerList5.Count):
				innerList5.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnNamespaceDeclaration(node as Boo.Lang.Compiler.Ast.NamespaceDeclaration) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnImport(node as Boo.Lang.Compiler.Ast.Import) as void:
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		lAssemblyReference = node.AssemblyReference
		if lAssemblyReference is not null:
			lAssemblyReference.Accept(self)
		lAlias = node.Alias
		if lAlias is not null:
			lAlias.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnModule(node as Boo.Lang.Compiler.Ast.Module) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList2 = lMembers.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList3 = lBaseTypes.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList4 = lGenericParameters.InnerList
			for i in range(0, innerList4.Count):
				innerList4.FastAt(i).Accept(self)
		lNamespace = node.Namespace
		if lNamespace is not null:
			lNamespace.Accept(self)
		lImports = node.Imports
		if lImports is not null:
			innerList6 = lImports.InnerList
			for i in range(0, innerList6.Count):
				innerList6.FastAt(i).Accept(self)
		lGlobals = node.Globals
		if lGlobals is not null:
			lGlobals.Accept(self)
		lAssemblyAttributes = node.AssemblyAttributes
		if lAssemblyAttributes is not null:
			innerList8 = lAssemblyAttributes.InnerList
			for i in range(0, innerList8.Count):
				innerList8.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnClassDefinition(node as Boo.Lang.Compiler.Ast.ClassDefinition) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList2 = lMembers.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList3 = lBaseTypes.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList4 = lGenericParameters.InnerList
			for i in range(0, innerList4.Count):
				innerList4.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStructDefinition(node as Boo.Lang.Compiler.Ast.StructDefinition) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList2 = lMembers.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList3 = lBaseTypes.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList4 = lGenericParameters.InnerList
			for i in range(0, innerList4.Count):
				innerList4.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnInterfaceDefinition(node as Boo.Lang.Compiler.Ast.InterfaceDefinition) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList2 = lMembers.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList3 = lBaseTypes.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList4 = lGenericParameters.InnerList
			for i in range(0, innerList4.Count):
				innerList4.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnEnumDefinition(node as Boo.Lang.Compiler.Ast.EnumDefinition) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList2 = lMembers.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList3 = lBaseTypes.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList4 = lGenericParameters.InnerList
			for i in range(0, innerList4.Count):
				innerList4.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnEnumMember(node as Boo.Lang.Compiler.Ast.EnumMember) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lInitializer = node.Initializer
		if lInitializer is not null:
			lInitializer.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnField(node as Boo.Lang.Compiler.Ast.Field) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		lInitializer = node.Initializer
		if lInitializer is not null:
			lInitializer.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnProperty(node as Boo.Lang.Compiler.Ast.Property) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList2 = lParameters.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lGetter = node.Getter
		if lGetter is not null:
			lGetter.Accept(self)
		lSetter = node.Setter
		if lSetter is not null:
			lSetter.Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		lExplicitInfo = node.ExplicitInfo
		if lExplicitInfo is not null:
			lExplicitInfo.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnEvent(node as Boo.Lang.Compiler.Ast.Event) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lAdd = node.Add
		if lAdd is not null:
			lAdd.Accept(self)
		lRemove = node.Remove
		if lRemove is not null:
			lRemove.Accept(self)
		lRaise = node.Raise
		if lRaise is not null:
			lRaise.Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnLocal(node as Boo.Lang.Compiler.Ast.Local) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBlockExpression(node as Boo.Lang.Compiler.Ast.BlockExpression) as void:
		lParameters = node.Parameters
		if lParameters is not null:
			innerList1 = lParameters.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMethod(node as Boo.Lang.Compiler.Ast.Method) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList2 = lParameters.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList3 = lGenericParameters.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lReturnTypeAttributes = node.ReturnTypeAttributes
		if lReturnTypeAttributes is not null:
			innerList5 = lReturnTypeAttributes.InnerList
			for i in range(0, innerList5.Count):
				innerList5.FastAt(i).Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)
		lLocals = node.Locals
		if lLocals is not null:
			innerList7 = lLocals.InnerList
			for i in range(0, innerList7.Count):
				innerList7.FastAt(i).Accept(self)
		lExplicitInfo = node.ExplicitInfo
		if lExplicitInfo is not null:
			lExplicitInfo.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnConstructor(node as Boo.Lang.Compiler.Ast.Constructor) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList2 = lParameters.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList3 = lGenericParameters.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lReturnTypeAttributes = node.ReturnTypeAttributes
		if lReturnTypeAttributes is not null:
			innerList5 = lReturnTypeAttributes.InnerList
			for i in range(0, innerList5.Count):
				innerList5.FastAt(i).Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)
		lLocals = node.Locals
		if lLocals is not null:
			innerList7 = lLocals.InnerList
			for i in range(0, innerList7.Count):
				innerList7.FastAt(i).Accept(self)
		lExplicitInfo = node.ExplicitInfo
		if lExplicitInfo is not null:
			lExplicitInfo.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDestructor(node as Boo.Lang.Compiler.Ast.Destructor) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList2 = lParameters.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList3 = lGenericParameters.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lReturnTypeAttributes = node.ReturnTypeAttributes
		if lReturnTypeAttributes is not null:
			innerList5 = lReturnTypeAttributes.InnerList
			for i in range(0, innerList5.Count):
				innerList5.FastAt(i).Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)
		lLocals = node.Locals
		if lLocals is not null:
			innerList7 = lLocals.InnerList
			for i in range(0, innerList7.Count):
				innerList7.FastAt(i).Accept(self)
		lExplicitInfo = node.ExplicitInfo
		if lExplicitInfo is not null:
			lExplicitInfo.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnParameterDeclaration(node as Boo.Lang.Compiler.Ast.ParameterDeclaration) as void:
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList2 = lAttributes.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericParameterDeclaration(node as Boo.Lang.Compiler.Ast.GenericParameterDeclaration) as void:
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList1 = lBaseTypes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDeclaration(node as Boo.Lang.Compiler.Ast.Declaration) as void:
		lType = node.Type
		if lType is not null:
			lType.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnAttribute(node as Boo.Lang.Compiler.Ast.Attribute) as void:
		lArguments = node.Arguments
		if lArguments is not null:
			innerList1 = lArguments.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lNamedArguments = node.NamedArguments
		if lNamedArguments is not null:
			innerList2 = lNamedArguments.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStatementModifier(node as Boo.Lang.Compiler.Ast.StatementModifier) as void:
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGotoStatement(node as Boo.Lang.Compiler.Ast.GotoStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lLabel = node.Label
		if lLabel is not null:
			lLabel.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnLabelStatement(node as Boo.Lang.Compiler.Ast.LabelStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBlock(node as Boo.Lang.Compiler.Ast.Block) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lStatements = node.Statements
		if lStatements is not null:
			innerList2 = lStatements.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDeclarationStatement(node as Boo.Lang.Compiler.Ast.DeclarationStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lDeclaration = node.Declaration
		if lDeclaration is not null:
			lDeclaration.Accept(self)
		lInitializer = node.Initializer
		if lInitializer is not null:
			lInitializer.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMacroStatement(node as Boo.Lang.Compiler.Ast.MacroStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lArguments = node.Arguments
		if lArguments is not null:
			innerList2 = lArguments.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTryStatement(node as Boo.Lang.Compiler.Ast.TryStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lProtectedBlock = node.ProtectedBlock
		if lProtectedBlock is not null:
			lProtectedBlock.Accept(self)
		lExceptionHandlers = node.ExceptionHandlers
		if lExceptionHandlers is not null:
			innerList3 = lExceptionHandlers.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)
		lFailureBlock = node.FailureBlock
		if lFailureBlock is not null:
			lFailureBlock.Accept(self)
		lEnsureBlock = node.EnsureBlock
		if lEnsureBlock is not null:
			lEnsureBlock.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExceptionHandler(node as Boo.Lang.Compiler.Ast.ExceptionHandler) as void:
		lDeclaration = node.Declaration
		if lDeclaration is not null:
			lDeclaration.Accept(self)
		lFilterCondition = node.FilterCondition
		if lFilterCondition is not null:
			lFilterCondition.Accept(self)
		lBlock = node.Block
		if lBlock is not null:
			lBlock.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnIfStatement(node as Boo.Lang.Compiler.Ast.IfStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)
		lTrueBlock = node.TrueBlock
		if lTrueBlock is not null:
			lTrueBlock.Accept(self)
		lFalseBlock = node.FalseBlock
		if lFalseBlock is not null:
			lFalseBlock.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnUnlessStatement(node as Boo.Lang.Compiler.Ast.UnlessStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)
		lBlock = node.Block
		if lBlock is not null:
			lBlock.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnForStatement(node as Boo.Lang.Compiler.Ast.ForStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lDeclarations = node.Declarations
		if lDeclarations is not null:
			innerList2 = lDeclarations.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lIterator = node.Iterator
		if lIterator is not null:
			lIterator.Accept(self)
		lBlock = node.Block
		if lBlock is not null:
			lBlock.Accept(self)
		lOrBlock = node.OrBlock
		if lOrBlock is not null:
			lOrBlock.Accept(self)
		lThenBlock = node.ThenBlock
		if lThenBlock is not null:
			lThenBlock.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnWhileStatement(node as Boo.Lang.Compiler.Ast.WhileStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)
		lBlock = node.Block
		if lBlock is not null:
			lBlock.Accept(self)
		lOrBlock = node.OrBlock
		if lOrBlock is not null:
			lOrBlock.Accept(self)
		lThenBlock = node.ThenBlock
		if lThenBlock is not null:
			lThenBlock.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBreakStatement(node as Boo.Lang.Compiler.Ast.BreakStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnContinueStatement(node as Boo.Lang.Compiler.Ast.ContinueStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnReturnStatement(node as Boo.Lang.Compiler.Ast.ReturnStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnYieldStatement(node as Boo.Lang.Compiler.Ast.YieldStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnRaiseStatement(node as Boo.Lang.Compiler.Ast.RaiseStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lException = node.Exception
		if lException is not null:
			lException.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnUnpackStatement(node as Boo.Lang.Compiler.Ast.UnpackStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lDeclarations = node.Declarations
		if lDeclarations is not null:
			innerList2 = lDeclarations.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExpressionStatement(node as Boo.Lang.Compiler.Ast.ExpressionStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnOmittedExpression(node as Boo.Lang.Compiler.Ast.OmittedExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExpressionPair(node as Boo.Lang.Compiler.Ast.ExpressionPair) as void:
		lFirst = node.First
		if lFirst is not null:
			lFirst.Accept(self)
		lSecond = node.Second
		if lSecond is not null:
			lSecond.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMethodInvocationExpression(node as Boo.Lang.Compiler.Ast.MethodInvocationExpression) as void:
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lArguments = node.Arguments
		if lArguments is not null:
			innerList2 = lArguments.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lNamedArguments = node.NamedArguments
		if lNamedArguments is not null:
			innerList3 = lNamedArguments.InnerList
			for i in range(0, innerList3.Count):
				innerList3.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnUnaryExpression(node as Boo.Lang.Compiler.Ast.UnaryExpression) as void:
		lOperand = node.Operand
		if lOperand is not null:
			lOperand.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBinaryExpression(node as Boo.Lang.Compiler.Ast.BinaryExpression) as void:
		lLeft = node.Left
		if lLeft is not null:
			lLeft.Accept(self)
		lRight = node.Right
		if lRight is not null:
			lRight.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnConditionalExpression(node as Boo.Lang.Compiler.Ast.ConditionalExpression) as void:
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)
		lTrueValue = node.TrueValue
		if lTrueValue is not null:
			lTrueValue.Accept(self)
		lFalseValue = node.FalseValue
		if lFalseValue is not null:
			lFalseValue.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnReferenceExpression(node as Boo.Lang.Compiler.Ast.ReferenceExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.MemberReferenceExpression) as void:
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGenericReferenceExpression(node as Boo.Lang.Compiler.Ast.GenericReferenceExpression) as void:
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lGenericArguments = node.GenericArguments
		if lGenericArguments is not null:
			innerList2 = lGenericArguments.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnQuasiquoteExpression(node as Boo.Lang.Compiler.Ast.QuasiquoteExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStringLiteralExpression(node as Boo.Lang.Compiler.Ast.StringLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCharLiteralExpression(node as Boo.Lang.Compiler.Ast.CharLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTimeSpanLiteralExpression(node as Boo.Lang.Compiler.Ast.TimeSpanLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnIntegerLiteralExpression(node as Boo.Lang.Compiler.Ast.IntegerLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnDoubleLiteralExpression(node as Boo.Lang.Compiler.Ast.DoubleLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnNullLiteralExpression(node as Boo.Lang.Compiler.Ast.NullLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSelfLiteralExpression(node as Boo.Lang.Compiler.Ast.SelfLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSuperLiteralExpression(node as Boo.Lang.Compiler.Ast.SuperLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnBoolLiteralExpression(node as Boo.Lang.Compiler.Ast.BoolLiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnRELiteralExpression(node as Boo.Lang.Compiler.Ast.RELiteralExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceExpression(node as Boo.Lang.Compiler.Ast.SpliceExpression) as void:
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceTypeReference(node as Boo.Lang.Compiler.Ast.SpliceTypeReference) as void:
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression) as void:
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lNameExpression = node.NameExpression
		if lNameExpression is not null:
			lNameExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceTypeMember(node as Boo.Lang.Compiler.Ast.SpliceTypeMember) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lTypeMember = node.TypeMember
		if lTypeMember is not null:
			lTypeMember.Accept(self)
		lNameExpression = node.NameExpression
		if lNameExpression is not null:
			lNameExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceTypeDefinitionBody(node as Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSpliceParameterDeclaration(node as Boo.Lang.Compiler.Ast.SpliceParameterDeclaration) as void:
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList2 = lAttributes.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lParameterDeclaration = node.ParameterDeclaration
		if lParameterDeclaration is not null:
			lParameterDeclaration.Accept(self)
		lNameExpression = node.NameExpression
		if lNameExpression is not null:
			lNameExpression.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExpressionInterpolationExpression(node as Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression) as void:
		lExpressions = node.Expressions
		if lExpressions is not null:
			innerList1 = lExpressions.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnHashLiteralExpression(node as Boo.Lang.Compiler.Ast.HashLiteralExpression) as void:
		lItems = node.Items
		if lItems is not null:
			innerList1 = lItems.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnListLiteralExpression(node as Boo.Lang.Compiler.Ast.ListLiteralExpression) as void:
		lItems = node.Items
		if lItems is not null:
			innerList1 = lItems.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCollectionInitializationExpression(node as Boo.Lang.Compiler.Ast.CollectionInitializationExpression) as void:
		lCollection = node.Collection
		if lCollection is not null:
			lCollection.Accept(self)
		lInitializer = node.Initializer
		if lInitializer is not null:
			lInitializer.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnArrayLiteralExpression(node as Boo.Lang.Compiler.Ast.ArrayLiteralExpression) as void:
		lItems = node.Items
		if lItems is not null:
			innerList1 = lItems.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnGeneratorExpression(node as Boo.Lang.Compiler.Ast.GeneratorExpression) as void:
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		lDeclarations = node.Declarations
		if lDeclarations is not null:
			innerList2 = lDeclarations.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)
		lIterator = node.Iterator
		if lIterator is not null:
			lIterator.Accept(self)
		lFilter = node.Filter
		if lFilter is not null:
			lFilter.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnExtendedGeneratorExpression(node as Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression) as void:
		lItems = node.Items
		if lItems is not null:
			innerList1 = lItems.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSlice(node as Boo.Lang.Compiler.Ast.Slice) as void:
		lBegin = node.Begin
		if lBegin is not null:
			lBegin.Accept(self)
		lEnd = node.End
		if lEnd is not null:
			lEnd.Accept(self)
		lStep = node.Step
		if lStep is not null:
			lStep.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnSlicingExpression(node as Boo.Lang.Compiler.Ast.SlicingExpression) as void:
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lIndices = node.Indices
		if lIndices is not null:
			innerList2 = lIndices.InnerList
			for i in range(0, innerList2.Count):
				innerList2.FastAt(i).Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTryCastExpression(node as Boo.Lang.Compiler.Ast.TryCastExpression) as void:
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCastExpression(node as Boo.Lang.Compiler.Ast.CastExpression) as void:
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnTypeofExpression(node as Boo.Lang.Compiler.Ast.TypeofExpression) as void:
		lType = node.Type
		if lType is not null:
			lType.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCustomStatement(node as Boo.Lang.Compiler.Ast.CustomStatement) as void:
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnCustomExpression(node as Boo.Lang.Compiler.Ast.CustomExpression) as void:

		pass

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	public virtual def OnStatementTypeMember(node as Boo.Lang.Compiler.Ast.StatementTypeMember) as void:
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList1 = lAttributes.InnerList
			for i in range(0, innerList1.Count):
				innerList1.FastAt(i).Accept(self)
		lStatement = node.Statement
		if lStatement is not null:
			lStatement.Accept(self)

	protected virtual def Visit(node as Node) as void:
		node.Accept(self) unless node is null
	
	protected virtual def Visit[of T(Node)](nodes as NodeCollection[of T]) as void:
		return if nodes is null
		innerList = nodes.InnerList
		for i in range(0, innerList.Count):
			innerList.FastAt(i).Accept(this)
