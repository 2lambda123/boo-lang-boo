#region license
// Copyright (c) 2009 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by Boo astgen.boo.
//

namespace Boo.Lang.Compiler.Ast

import System

public callable NodeEvent[of T(Node)](node as T)

public partial class DepthFirstGuide(IAstVisitor):
	public event OnCompileUnit as NodeEvent[of CompileUnit]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnCompileUnit(node as Boo.Lang.Compiler.Ast.CompileUnit) as void:
	
		lModules = node.Modules
		if lModules is not null:
			innerList = lModules.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnCompileUnit
		if handler is not null:
			handler(node);
	public event OnTypeMemberStatement as NodeEvent[of TypeMemberStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnTypeMemberStatement(node as Boo.Lang.Compiler.Ast.TypeMemberStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lTypeMember = node.TypeMember
		if lTypeMember is not null:
			lTypeMember.Accept(self)
		handler = OnTypeMemberStatement
		if handler is not null:
			handler(node);
	public event OnExplicitMemberInfo as NodeEvent[of ExplicitMemberInfo]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnExplicitMemberInfo(node as Boo.Lang.Compiler.Ast.ExplicitMemberInfo) as void:
	
		lInterfaceType = node.InterfaceType
		if lInterfaceType is not null:
			lInterfaceType.Accept(self)
		handler = OnExplicitMemberInfo
		if handler is not null:
			handler(node);
	public event OnSimpleTypeReference as NodeEvent[of SimpleTypeReference]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSimpleTypeReference(node as Boo.Lang.Compiler.Ast.SimpleTypeReference) as void:
		handler = OnSimpleTypeReference
		return if handler is null
		handler(node)
	public event OnArrayTypeReference as NodeEvent[of ArrayTypeReference]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnArrayTypeReference(node as Boo.Lang.Compiler.Ast.ArrayTypeReference) as void:
	
		lElementType = node.ElementType
		if lElementType is not null:
			lElementType.Accept(self)
		lRank = node.Rank
		if lRank is not null:
			lRank.Accept(self)
		handler = OnArrayTypeReference
		if handler is not null:
			handler(node);
	public event OnCallableTypeReference as NodeEvent[of CallableTypeReference]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnCallableTypeReference(node as Boo.Lang.Compiler.Ast.CallableTypeReference) as void:
	
		lParameters = node.Parameters
		if lParameters is not null:
			innerList = lParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		handler = OnCallableTypeReference
		if handler is not null:
			handler(node);
	public event OnGenericTypeReference as NodeEvent[of GenericTypeReference]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnGenericTypeReference(node as Boo.Lang.Compiler.Ast.GenericTypeReference) as void:
	
		lGenericArguments = node.GenericArguments
		if lGenericArguments is not null:
			innerList = lGenericArguments.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnGenericTypeReference
		if handler is not null:
			handler(node);
	public event OnGenericTypeDefinitionReference as NodeEvent[of GenericTypeDefinitionReference]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnGenericTypeDefinitionReference(node as Boo.Lang.Compiler.Ast.GenericTypeDefinitionReference) as void:
		handler = OnGenericTypeDefinitionReference
		return if handler is null
		handler(node)
	public event OnCallableDefinition as NodeEvent[of CallableDefinition]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnCallableDefinition(node as Boo.Lang.Compiler.Ast.CallableDefinition) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList = lParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList = lGenericParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lReturnTypeAttributes = node.ReturnTypeAttributes
		if lReturnTypeAttributes is not null:
			innerList = lReturnTypeAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnCallableDefinition
		if handler is not null:
			handler(node);
	public event OnNamespaceDeclaration as NodeEvent[of NamespaceDeclaration]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnNamespaceDeclaration(node as Boo.Lang.Compiler.Ast.NamespaceDeclaration) as void:
		handler = OnNamespaceDeclaration
		return if handler is null
		handler(node)
	public event OnImport as NodeEvent[of Import]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnImport(node as Boo.Lang.Compiler.Ast.Import) as void:
	
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		lAssemblyReference = node.AssemblyReference
		if lAssemblyReference is not null:
			lAssemblyReference.Accept(self)
		lAlias = node.Alias
		if lAlias is not null:
			lAlias.Accept(self)
		handler = OnImport
		if handler is not null:
			handler(node);
	public event OnModule as NodeEvent[of Module]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnModule(node as Boo.Lang.Compiler.Ast.Module) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList = lMembers.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList = lBaseTypes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList = lGenericParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lNamespace = node.Namespace
		if lNamespace is not null:
			lNamespace.Accept(self)
		lImports = node.Imports
		if lImports is not null:
			innerList = lImports.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGlobals = node.Globals
		if lGlobals is not null:
			lGlobals.Accept(self)
		lAssemblyAttributes = node.AssemblyAttributes
		if lAssemblyAttributes is not null:
			innerList = lAssemblyAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnModule
		if handler is not null:
			handler(node);
	public event OnClassDefinition as NodeEvent[of ClassDefinition]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnClassDefinition(node as Boo.Lang.Compiler.Ast.ClassDefinition) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList = lMembers.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList = lBaseTypes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList = lGenericParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnClassDefinition
		if handler is not null:
			handler(node);
	public event OnStructDefinition as NodeEvent[of StructDefinition]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnStructDefinition(node as Boo.Lang.Compiler.Ast.StructDefinition) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList = lMembers.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList = lBaseTypes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList = lGenericParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnStructDefinition
		if handler is not null:
			handler(node);
	public event OnInterfaceDefinition as NodeEvent[of InterfaceDefinition]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnInterfaceDefinition(node as Boo.Lang.Compiler.Ast.InterfaceDefinition) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList = lMembers.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList = lBaseTypes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList = lGenericParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnInterfaceDefinition
		if handler is not null:
			handler(node);
	public event OnEnumDefinition as NodeEvent[of EnumDefinition]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnEnumDefinition(node as Boo.Lang.Compiler.Ast.EnumDefinition) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lMembers = node.Members
		if lMembers is not null:
			innerList = lMembers.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList = lBaseTypes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList = lGenericParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnEnumDefinition
		if handler is not null:
			handler(node);
	public event OnEnumMember as NodeEvent[of EnumMember]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnEnumMember(node as Boo.Lang.Compiler.Ast.EnumMember) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lInitializer = node.Initializer
		if lInitializer is not null:
			lInitializer.Accept(self)
		handler = OnEnumMember
		if handler is not null:
			handler(node);
	public event OnField as NodeEvent[of Field]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnField(node as Boo.Lang.Compiler.Ast.Field) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		lInitializer = node.Initializer
		if lInitializer is not null:
			lInitializer.Accept(self)
		handler = OnField
		if handler is not null:
			handler(node);
	public event OnProperty as NodeEvent[of Property]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnProperty(node as Boo.Lang.Compiler.Ast.Property) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList = lParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGetter = node.Getter
		if lGetter is not null:
			lGetter.Accept(self)
		lSetter = node.Setter
		if lSetter is not null:
			lSetter.Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		lExplicitInfo = node.ExplicitInfo
		if lExplicitInfo is not null:
			lExplicitInfo.Accept(self)
		handler = OnProperty
		if handler is not null:
			handler(node);
	public event OnEvent as NodeEvent[of Event]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnEvent(node as Boo.Lang.Compiler.Ast.Event) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lAdd = node.Add
		if lAdd is not null:
			lAdd.Accept(self)
		lRemove = node.Remove
		if lRemove is not null:
			lRemove.Accept(self)
		lRaise = node.Raise
		if lRaise is not null:
			lRaise.Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		handler = OnEvent
		if handler is not null:
			handler(node);
	public event OnLocal as NodeEvent[of Local]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnLocal(node as Boo.Lang.Compiler.Ast.Local) as void:
		handler = OnLocal
		return if handler is null
		handler(node)
	public event OnBlockExpression as NodeEvent[of BlockExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnBlockExpression(node as Boo.Lang.Compiler.Ast.BlockExpression) as void:
	
		lParameters = node.Parameters
		if lParameters is not null:
			innerList = lParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)
		handler = OnBlockExpression
		if handler is not null:
			handler(node);
	public event OnMethod as NodeEvent[of Method]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnMethod(node as Boo.Lang.Compiler.Ast.Method) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList = lParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList = lGenericParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lReturnTypeAttributes = node.ReturnTypeAttributes
		if lReturnTypeAttributes is not null:
			innerList = lReturnTypeAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)
		lLocals = node.Locals
		if lLocals is not null:
			innerList = lLocals.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lExplicitInfo = node.ExplicitInfo
		if lExplicitInfo is not null:
			lExplicitInfo.Accept(self)
		handler = OnMethod
		if handler is not null:
			handler(node);
	public event OnConstructor as NodeEvent[of Constructor]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnConstructor(node as Boo.Lang.Compiler.Ast.Constructor) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList = lParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList = lGenericParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lReturnTypeAttributes = node.ReturnTypeAttributes
		if lReturnTypeAttributes is not null:
			innerList = lReturnTypeAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)
		lLocals = node.Locals
		if lLocals is not null:
			innerList = lLocals.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lExplicitInfo = node.ExplicitInfo
		if lExplicitInfo is not null:
			lExplicitInfo.Accept(self)
		handler = OnConstructor
		if handler is not null:
			handler(node);
	public event OnDestructor as NodeEvent[of Destructor]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnDestructor(node as Boo.Lang.Compiler.Ast.Destructor) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lParameters = node.Parameters
		if lParameters is not null:
			innerList = lParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lGenericParameters = node.GenericParameters
		if lGenericParameters is not null:
			innerList = lGenericParameters.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lReturnType = node.ReturnType
		if lReturnType is not null:
			lReturnType.Accept(self)
		lReturnTypeAttributes = node.ReturnTypeAttributes
		if lReturnTypeAttributes is not null:
			innerList = lReturnTypeAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)
		lLocals = node.Locals
		if lLocals is not null:
			innerList = lLocals.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lExplicitInfo = node.ExplicitInfo
		if lExplicitInfo is not null:
			lExplicitInfo.Accept(self)
		handler = OnDestructor
		if handler is not null:
			handler(node);
	public event OnParameterDeclaration as NodeEvent[of ParameterDeclaration]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnParameterDeclaration(node as Boo.Lang.Compiler.Ast.ParameterDeclaration) as void:
	
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnParameterDeclaration
		if handler is not null:
			handler(node);
	public event OnGenericParameterDeclaration as NodeEvent[of GenericParameterDeclaration]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnGenericParameterDeclaration(node as Boo.Lang.Compiler.Ast.GenericParameterDeclaration) as void:
	
		lBaseTypes = node.BaseTypes
		if lBaseTypes is not null:
			innerList = lBaseTypes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnGenericParameterDeclaration
		if handler is not null:
			handler(node);
	public event OnDeclaration as NodeEvent[of Declaration]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnDeclaration(node as Boo.Lang.Compiler.Ast.Declaration) as void:
	
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		handler = OnDeclaration
		if handler is not null:
			handler(node);
	public event OnAttribute as NodeEvent[of Attribute]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnAttribute(node as Boo.Lang.Compiler.Ast.Attribute) as void:
	
		lArguments = node.Arguments
		if lArguments is not null:
			innerList = lArguments.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lNamedArguments = node.NamedArguments
		if lNamedArguments is not null:
			innerList = lNamedArguments.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnAttribute
		if handler is not null:
			handler(node);
	public event OnStatementModifier as NodeEvent[of StatementModifier]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnStatementModifier(node as Boo.Lang.Compiler.Ast.StatementModifier) as void:
	
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)
		handler = OnStatementModifier
		if handler is not null:
			handler(node);
	public event OnGotoStatement as NodeEvent[of GotoStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnGotoStatement(node as Boo.Lang.Compiler.Ast.GotoStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lLabel = node.Label
		if lLabel is not null:
			lLabel.Accept(self)
		handler = OnGotoStatement
		if handler is not null:
			handler(node);
	public event OnLabelStatement as NodeEvent[of LabelStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnLabelStatement(node as Boo.Lang.Compiler.Ast.LabelStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		handler = OnLabelStatement
		if handler is not null:
			handler(node);
	public event OnBlock as NodeEvent[of Block]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnBlock(node as Boo.Lang.Compiler.Ast.Block) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lStatements = node.Statements
		if lStatements is not null:
			innerList = lStatements.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnBlock
		if handler is not null:
			handler(node);
	public event OnDeclarationStatement as NodeEvent[of DeclarationStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnDeclarationStatement(node as Boo.Lang.Compiler.Ast.DeclarationStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lDeclaration = node.Declaration
		if lDeclaration is not null:
			lDeclaration.Accept(self)
		lInitializer = node.Initializer
		if lInitializer is not null:
			lInitializer.Accept(self)
		handler = OnDeclarationStatement
		if handler is not null:
			handler(node);
	public event OnMacroStatement as NodeEvent[of MacroStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnMacroStatement(node as Boo.Lang.Compiler.Ast.MacroStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lArguments = node.Arguments
		if lArguments is not null:
			innerList = lArguments.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lBody = node.Body
		if lBody is not null:
			lBody.Accept(self)
		handler = OnMacroStatement
		if handler is not null:
			handler(node);
	public event OnTryStatement as NodeEvent[of TryStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnTryStatement(node as Boo.Lang.Compiler.Ast.TryStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lProtectedBlock = node.ProtectedBlock
		if lProtectedBlock is not null:
			lProtectedBlock.Accept(self)
		lExceptionHandlers = node.ExceptionHandlers
		if lExceptionHandlers is not null:
			innerList = lExceptionHandlers.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lFailureBlock = node.FailureBlock
		if lFailureBlock is not null:
			lFailureBlock.Accept(self)
		lEnsureBlock = node.EnsureBlock
		if lEnsureBlock is not null:
			lEnsureBlock.Accept(self)
		handler = OnTryStatement
		if handler is not null:
			handler(node);
	public event OnExceptionHandler as NodeEvent[of ExceptionHandler]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnExceptionHandler(node as Boo.Lang.Compiler.Ast.ExceptionHandler) as void:
	
		lDeclaration = node.Declaration
		if lDeclaration is not null:
			lDeclaration.Accept(self)
		lFilterCondition = node.FilterCondition
		if lFilterCondition is not null:
			lFilterCondition.Accept(self)
		lBlock = node.Block
		if lBlock is not null:
			lBlock.Accept(self)
		handler = OnExceptionHandler
		if handler is not null:
			handler(node);
	public event OnIfStatement as NodeEvent[of IfStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnIfStatement(node as Boo.Lang.Compiler.Ast.IfStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)
		lTrueBlock = node.TrueBlock
		if lTrueBlock is not null:
			lTrueBlock.Accept(self)
		lFalseBlock = node.FalseBlock
		if lFalseBlock is not null:
			lFalseBlock.Accept(self)
		handler = OnIfStatement
		if handler is not null:
			handler(node);
	public event OnUnlessStatement as NodeEvent[of UnlessStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnUnlessStatement(node as Boo.Lang.Compiler.Ast.UnlessStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)
		lBlock = node.Block
		if lBlock is not null:
			lBlock.Accept(self)
		handler = OnUnlessStatement
		if handler is not null:
			handler(node);
	public event OnForStatement as NodeEvent[of ForStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnForStatement(node as Boo.Lang.Compiler.Ast.ForStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lDeclarations = node.Declarations
		if lDeclarations is not null:
			innerList = lDeclarations.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lIterator = node.Iterator
		if lIterator is not null:
			lIterator.Accept(self)
		lBlock = node.Block
		if lBlock is not null:
			lBlock.Accept(self)
		lOrBlock = node.OrBlock
		if lOrBlock is not null:
			lOrBlock.Accept(self)
		lThenBlock = node.ThenBlock
		if lThenBlock is not null:
			lThenBlock.Accept(self)
		handler = OnForStatement
		if handler is not null:
			handler(node);
	public event OnWhileStatement as NodeEvent[of WhileStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnWhileStatement(node as Boo.Lang.Compiler.Ast.WhileStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)
		lBlock = node.Block
		if lBlock is not null:
			lBlock.Accept(self)
		lOrBlock = node.OrBlock
		if lOrBlock is not null:
			lOrBlock.Accept(self)
		lThenBlock = node.ThenBlock
		if lThenBlock is not null:
			lThenBlock.Accept(self)
		handler = OnWhileStatement
		if handler is not null:
			handler(node);
	public event OnBreakStatement as NodeEvent[of BreakStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnBreakStatement(node as Boo.Lang.Compiler.Ast.BreakStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		handler = OnBreakStatement
		if handler is not null:
			handler(node);
	public event OnContinueStatement as NodeEvent[of ContinueStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnContinueStatement(node as Boo.Lang.Compiler.Ast.ContinueStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		handler = OnContinueStatement
		if handler is not null:
			handler(node);
	public event OnReturnStatement as NodeEvent[of ReturnStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnReturnStatement(node as Boo.Lang.Compiler.Ast.ReturnStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		handler = OnReturnStatement
		if handler is not null:
			handler(node);
	public event OnYieldStatement as NodeEvent[of YieldStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnYieldStatement(node as Boo.Lang.Compiler.Ast.YieldStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		handler = OnYieldStatement
		if handler is not null:
			handler(node);
	public event OnRaiseStatement as NodeEvent[of RaiseStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnRaiseStatement(node as Boo.Lang.Compiler.Ast.RaiseStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lException = node.Exception
		if lException is not null:
			lException.Accept(self)
		handler = OnRaiseStatement
		if handler is not null:
			handler(node);
	public event OnUnpackStatement as NodeEvent[of UnpackStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnUnpackStatement(node as Boo.Lang.Compiler.Ast.UnpackStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lDeclarations = node.Declarations
		if lDeclarations is not null:
			innerList = lDeclarations.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		handler = OnUnpackStatement
		if handler is not null:
			handler(node);
	public event OnExpressionStatement as NodeEvent[of ExpressionStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnExpressionStatement(node as Boo.Lang.Compiler.Ast.ExpressionStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		handler = OnExpressionStatement
		if handler is not null:
			handler(node);
	public event OnOmittedExpression as NodeEvent[of OmittedExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnOmittedExpression(node as Boo.Lang.Compiler.Ast.OmittedExpression) as void:
		handler = OnOmittedExpression
		return if handler is null
		handler(node)
	public event OnExpressionPair as NodeEvent[of ExpressionPair]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnExpressionPair(node as Boo.Lang.Compiler.Ast.ExpressionPair) as void:
	
		lFirst = node.First
		if lFirst is not null:
			lFirst.Accept(self)
		lSecond = node.Second
		if lSecond is not null:
			lSecond.Accept(self)
		handler = OnExpressionPair
		if handler is not null:
			handler(node);
	public event OnMethodInvocationExpression as NodeEvent[of MethodInvocationExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnMethodInvocationExpression(node as Boo.Lang.Compiler.Ast.MethodInvocationExpression) as void:
	
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lArguments = node.Arguments
		if lArguments is not null:
			innerList = lArguments.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lNamedArguments = node.NamedArguments
		if lNamedArguments is not null:
			innerList = lNamedArguments.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnMethodInvocationExpression
		if handler is not null:
			handler(node);
	public event OnUnaryExpression as NodeEvent[of UnaryExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnUnaryExpression(node as Boo.Lang.Compiler.Ast.UnaryExpression) as void:
	
		lOperand = node.Operand
		if lOperand is not null:
			lOperand.Accept(self)
		handler = OnUnaryExpression
		if handler is not null:
			handler(node);
	public event OnBinaryExpression as NodeEvent[of BinaryExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnBinaryExpression(node as Boo.Lang.Compiler.Ast.BinaryExpression) as void:
	
		lLeft = node.Left
		if lLeft is not null:
			lLeft.Accept(self)
		lRight = node.Right
		if lRight is not null:
			lRight.Accept(self)
		handler = OnBinaryExpression
		if handler is not null:
			handler(node);
	public event OnConditionalExpression as NodeEvent[of ConditionalExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnConditionalExpression(node as Boo.Lang.Compiler.Ast.ConditionalExpression) as void:
	
		lCondition = node.Condition
		if lCondition is not null:
			lCondition.Accept(self)
		lTrueValue = node.TrueValue
		if lTrueValue is not null:
			lTrueValue.Accept(self)
		lFalseValue = node.FalseValue
		if lFalseValue is not null:
			lFalseValue.Accept(self)
		handler = OnConditionalExpression
		if handler is not null:
			handler(node);
	public event OnReferenceExpression as NodeEvent[of ReferenceExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnReferenceExpression(node as Boo.Lang.Compiler.Ast.ReferenceExpression) as void:
		handler = OnReferenceExpression
		return if handler is null
		handler(node)
	public event OnMemberReferenceExpression as NodeEvent[of MemberReferenceExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.MemberReferenceExpression) as void:
	
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		handler = OnMemberReferenceExpression
		if handler is not null:
			handler(node);
	public event OnGenericReferenceExpression as NodeEvent[of GenericReferenceExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnGenericReferenceExpression(node as Boo.Lang.Compiler.Ast.GenericReferenceExpression) as void:
	
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lGenericArguments = node.GenericArguments
		if lGenericArguments is not null:
			innerList = lGenericArguments.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnGenericReferenceExpression
		if handler is not null:
			handler(node);
	public event OnQuasiquoteExpression as NodeEvent[of QuasiquoteExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnQuasiquoteExpression(node as Boo.Lang.Compiler.Ast.QuasiquoteExpression) as void:
		handler = OnQuasiquoteExpression
		return if handler is null
		handler(node)
	public event OnStringLiteralExpression as NodeEvent[of StringLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnStringLiteralExpression(node as Boo.Lang.Compiler.Ast.StringLiteralExpression) as void:
		handler = OnStringLiteralExpression
		return if handler is null
		handler(node)
	public event OnCharLiteralExpression as NodeEvent[of CharLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnCharLiteralExpression(node as Boo.Lang.Compiler.Ast.CharLiteralExpression) as void:
		handler = OnCharLiteralExpression
		return if handler is null
		handler(node)
	public event OnTimeSpanLiteralExpression as NodeEvent[of TimeSpanLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnTimeSpanLiteralExpression(node as Boo.Lang.Compiler.Ast.TimeSpanLiteralExpression) as void:
		handler = OnTimeSpanLiteralExpression
		return if handler is null
		handler(node)
	public event OnIntegerLiteralExpression as NodeEvent[of IntegerLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnIntegerLiteralExpression(node as Boo.Lang.Compiler.Ast.IntegerLiteralExpression) as void:
		handler = OnIntegerLiteralExpression
		return if handler is null
		handler(node)
	public event OnDoubleLiteralExpression as NodeEvent[of DoubleLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnDoubleLiteralExpression(node as Boo.Lang.Compiler.Ast.DoubleLiteralExpression) as void:
		handler = OnDoubleLiteralExpression
		return if handler is null
		handler(node)
	public event OnNullLiteralExpression as NodeEvent[of NullLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnNullLiteralExpression(node as Boo.Lang.Compiler.Ast.NullLiteralExpression) as void:
		handler = OnNullLiteralExpression
		return if handler is null
		handler(node)
	public event OnSelfLiteralExpression as NodeEvent[of SelfLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSelfLiteralExpression(node as Boo.Lang.Compiler.Ast.SelfLiteralExpression) as void:
		handler = OnSelfLiteralExpression
		return if handler is null
		handler(node)
	public event OnSuperLiteralExpression as NodeEvent[of SuperLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSuperLiteralExpression(node as Boo.Lang.Compiler.Ast.SuperLiteralExpression) as void:
		handler = OnSuperLiteralExpression
		return if handler is null
		handler(node)
	public event OnBoolLiteralExpression as NodeEvent[of BoolLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnBoolLiteralExpression(node as Boo.Lang.Compiler.Ast.BoolLiteralExpression) as void:
		handler = OnBoolLiteralExpression
		return if handler is null
		handler(node)
	public event OnRELiteralExpression as NodeEvent[of RELiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnRELiteralExpression(node as Boo.Lang.Compiler.Ast.RELiteralExpression) as void:
		handler = OnRELiteralExpression
		return if handler is null
		handler(node)
	public event OnSpliceExpression as NodeEvent[of SpliceExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSpliceExpression(node as Boo.Lang.Compiler.Ast.SpliceExpression) as void:
	
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		handler = OnSpliceExpression
		if handler is not null:
			handler(node);
	public event OnSpliceTypeReference as NodeEvent[of SpliceTypeReference]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSpliceTypeReference(node as Boo.Lang.Compiler.Ast.SpliceTypeReference) as void:
	
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		handler = OnSpliceTypeReference
		if handler is not null:
			handler(node);
	public event OnSpliceMemberReferenceExpression as NodeEvent[of SpliceMemberReferenceExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSpliceMemberReferenceExpression(node as Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression) as void:
	
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lNameExpression = node.NameExpression
		if lNameExpression is not null:
			lNameExpression.Accept(self)
		handler = OnSpliceMemberReferenceExpression
		if handler is not null:
			handler(node);
	public event OnSpliceTypeMember as NodeEvent[of SpliceTypeMember]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSpliceTypeMember(node as Boo.Lang.Compiler.Ast.SpliceTypeMember) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lTypeMember = node.TypeMember
		if lTypeMember is not null:
			lTypeMember.Accept(self)
		lNameExpression = node.NameExpression
		if lNameExpression is not null:
			lNameExpression.Accept(self)
		handler = OnSpliceTypeMember
		if handler is not null:
			handler(node);
	public event OnSpliceTypeDefinitionBody as NodeEvent[of SpliceTypeDefinitionBody]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSpliceTypeDefinitionBody(node as Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		handler = OnSpliceTypeDefinitionBody
		if handler is not null:
			handler(node);
	public event OnSpliceParameterDeclaration as NodeEvent[of SpliceParameterDeclaration]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSpliceParameterDeclaration(node as Boo.Lang.Compiler.Ast.SpliceParameterDeclaration) as void:
	
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lParameterDeclaration = node.ParameterDeclaration
		if lParameterDeclaration is not null:
			lParameterDeclaration.Accept(self)
		lNameExpression = node.NameExpression
		if lNameExpression is not null:
			lNameExpression.Accept(self)
		handler = OnSpliceParameterDeclaration
		if handler is not null:
			handler(node);
	public event OnExpressionInterpolationExpression as NodeEvent[of ExpressionInterpolationExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnExpressionInterpolationExpression(node as Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression) as void:
	
		lExpressions = node.Expressions
		if lExpressions is not null:
			innerList = lExpressions.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnExpressionInterpolationExpression
		if handler is not null:
			handler(node);
	public event OnHashLiteralExpression as NodeEvent[of HashLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnHashLiteralExpression(node as Boo.Lang.Compiler.Ast.HashLiteralExpression) as void:
	
		lItems = node.Items
		if lItems is not null:
			innerList = lItems.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnHashLiteralExpression
		if handler is not null:
			handler(node);
	public event OnListLiteralExpression as NodeEvent[of ListLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnListLiteralExpression(node as Boo.Lang.Compiler.Ast.ListLiteralExpression) as void:
	
		lItems = node.Items
		if lItems is not null:
			innerList = lItems.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnListLiteralExpression
		if handler is not null:
			handler(node);
	public event OnCollectionInitializationExpression as NodeEvent[of CollectionInitializationExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnCollectionInitializationExpression(node as Boo.Lang.Compiler.Ast.CollectionInitializationExpression) as void:
	
		lCollection = node.Collection
		if lCollection is not null:
			lCollection.Accept(self)
		lInitializer = node.Initializer
		if lInitializer is not null:
			lInitializer.Accept(self)
		handler = OnCollectionInitializationExpression
		if handler is not null:
			handler(node);
	public event OnArrayLiteralExpression as NodeEvent[of ArrayLiteralExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnArrayLiteralExpression(node as Boo.Lang.Compiler.Ast.ArrayLiteralExpression) as void:
	
		lItems = node.Items
		if lItems is not null:
			innerList = lItems.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		handler = OnArrayLiteralExpression
		if handler is not null:
			handler(node);
	public event OnGeneratorExpression as NodeEvent[of GeneratorExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnGeneratorExpression(node as Boo.Lang.Compiler.Ast.GeneratorExpression) as void:
	
		lExpression = node.Expression
		if lExpression is not null:
			lExpression.Accept(self)
		lDeclarations = node.Declarations
		if lDeclarations is not null:
			innerList = lDeclarations.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lIterator = node.Iterator
		if lIterator is not null:
			lIterator.Accept(self)
		lFilter = node.Filter
		if lFilter is not null:
			lFilter.Accept(self)
		handler = OnGeneratorExpression
		if handler is not null:
			handler(node);
	public event OnExtendedGeneratorExpression as NodeEvent[of ExtendedGeneratorExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnExtendedGeneratorExpression(node as Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression) as void:
	
		lItems = node.Items
		if lItems is not null:
			innerList = lItems.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnExtendedGeneratorExpression
		if handler is not null:
			handler(node);
	public event OnSlice as NodeEvent[of Slice]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSlice(node as Boo.Lang.Compiler.Ast.Slice) as void:
	
		lBegin = node.Begin
		if lBegin is not null:
			lBegin.Accept(self)
		lEnd = node.End
		if lEnd is not null:
			lEnd.Accept(self)
		lStep = node.Step
		if lStep is not null:
			lStep.Accept(self)
		handler = OnSlice
		if handler is not null:
			handler(node);
	public event OnSlicingExpression as NodeEvent[of SlicingExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnSlicingExpression(node as Boo.Lang.Compiler.Ast.SlicingExpression) as void:
	
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lIndices = node.Indices
		if lIndices is not null:
			innerList = lIndices.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		handler = OnSlicingExpression
		if handler is not null:
			handler(node);
	public event OnTryCastExpression as NodeEvent[of TryCastExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnTryCastExpression(node as Boo.Lang.Compiler.Ast.TryCastExpression) as void:
	
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		handler = OnTryCastExpression
		if handler is not null:
			handler(node);
	public event OnCastExpression as NodeEvent[of CastExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnCastExpression(node as Boo.Lang.Compiler.Ast.CastExpression) as void:
	
		lTarget = node.Target
		if lTarget is not null:
			lTarget.Accept(self)
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		handler = OnCastExpression
		if handler is not null:
			handler(node);
	public event OnTypeofExpression as NodeEvent[of TypeofExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnTypeofExpression(node as Boo.Lang.Compiler.Ast.TypeofExpression) as void:
	
		lType = node.Type
		if lType is not null:
			lType.Accept(self)
		handler = OnTypeofExpression
		if handler is not null:
			handler(node);
	public event OnCustomStatement as NodeEvent[of CustomStatement]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnCustomStatement(node as Boo.Lang.Compiler.Ast.CustomStatement) as void:
	
		lModifier = node.Modifier
		if lModifier is not null:
			lModifier.Accept(self)
		handler = OnCustomStatement
		if handler is not null:
			handler(node);
	public event OnCustomExpression as NodeEvent[of CustomExpression]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnCustomExpression(node as Boo.Lang.Compiler.Ast.CustomExpression) as void:
		handler = OnCustomExpression
		return if handler is null
		handler(node)
	public event OnStatementTypeMember as NodeEvent[of StatementTypeMember]

	[System.CodeDom.Compiler.GeneratedCodeAttribute("Boo astgen.boo", "1")]
	def IAstVisitor.OnStatementTypeMember(node as Boo.Lang.Compiler.Ast.StatementTypeMember) as void:
	
		lAttributes = node.Attributes
		if lAttributes is not null:
			innerList = lAttributes.InnerList
			for i in range(0, innerList.Count):
				innerList.FastAt(i).Accept(self)
		lStatement = node.Statement
		if lStatement is not null:
			lStatement.Accept(self)
		handler = OnStatementTypeMember
		if handler is not null:
			handler(node);
